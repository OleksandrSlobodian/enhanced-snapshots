<<<<<<< HEAD
var app=angular.module("web",["ui.router","angularAwesomeSlider","ui.bootstrap","smart-table","ngTagsInput","ngStomp","toastr"]);app.constant("BASE_URL","./"),app.constant("ITEMS_BY_PAGE",25),app.constant("DISPLAY_PAGES",7),app.config(["$stateProvider","$urlRouterProvider","$httpProvider",function(a,b,c){b.otherwise("/app/volumes");var d=["$rootScope",function(a){if(angular.isUndefined(a.getUserName()))throw"User not authorized!";return!0}],e=["$rootScope",function(a){if(!a.isConfigState())throw"System is not in configuration state!";return!0}],f=["System","$q","$rootScope",function(a,b,c){c.isLoading=!0;var d=b.defer();return a.get().then(function(a){c.isLoading=!1,d.resolve(a)},function(){c.isLoading=!1,d.reject(!1)}),d.promise}];a.state("app",{abstract:!0,url:"/app",templateUrl:"partials/app.html",resolve:{authenticated:d},controller:function(a,b,c,d){b.$on("$stateChangeSuccess",function(){var a=c.get("notification");a&&(d.info(a,void 0,{closeButton:!0,timeOut:2e4}),c.remove("notification"))})}}).state("app.volume",{abstract:!0,template:"<ui-view></ui-view>",url:""}).state("app.volume.list",{url:"/volumes",templateUrl:"partials/volumes.html",controller:"VolumesController"}).state("app.volume.schedule",{url:"/schedule/:volumeId",templateUrl:"partials/schedule.html",controller:"ScheduleController"}).state("app.volume.history",{url:"/history/:volumeId",templateUrl:"partials/history.html",controller:"HistoryController"}).state("app.volume.tasks",{url:"/tasks/:volumeId",templateUrl:"partials/tasks.html",controller:"TasksController"}).state("app.tasks",{url:"/tasks",templateUrl:"partials/tasks.html",controller:"TasksController"}).state("app.settings",{url:"/settings",templateUrl:"partials/settings.html",controller:"SettingsController"}).state("app.users",{url:"/users",templateUrl:"partials/users.html",controller:"UserController",resolve:{ssoMode:f}}).state("app.logs",{url:"/logs",templateUrl:"partials/logs.html",controller:"LogsController"}).state("config",{url:"/config",templateUrl:"partials/config.html",controller:"ConfigController",resolve:{isConfig:e}}).state("login",{url:"/login?err",templateUrl:"partials/login.html",controller:"LoginController"}).state("registration",{url:"/registration",templateUrl:"partials/registration.html",controller:"RegistrationController"}),c.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",c.interceptors.push("Interceptor")}]).run(["$rootScope","$state","$modal","$stomp","toastr","Storage","Users","System","$q",function(a,b,c,d,e,f,g,h,i){a.isLoading=!0;var j=[h.get(),g.refreshCurrent()];i.all(j).then(function(c){f.save("ssoMode",{ssoMode:c[0].ssoMode}),c[1].email&&b.go("app.volume.list"),a.isLoading=!1},function(){a.isLoading=!1}),a.getUserName=function(){return(f.get("currentUser")||{}).email},a.isConfigState=function(){return"configurator"===(f.get("currentUser")||{}).role},a.subscribeWS=function(){d.setDebug(function(a){}),d.connect("/rest/ws").then(function(b){a.errorListener=d.subscribe("/error",function(a){e.error(a.message,a.title)}),a.taskListener=d.subscribe("/task",function(b){f.save("lastTaskStatus_"+b.taskId,b),a.$broadcast("task-status-changed",b)})},function(a){console.log(a)})},a.$on("$stateChangeError",function(c){c.preventDefault(),f.get("ssoMode")?a.isLoading=!0:b.go("login")}),a.errorListener={},a.taskListener={},angular.isDefined(a.getUserName())&&a.subscribeWS()}]),angular.module("web").controller("ConfigController",["$scope","Volumes","Configuration","$modal","$state","Storage",function(a,b,c,d,e,f){var g=6e5;a.STRINGS={s3:{empty:"Bucket name field cannot be empty",new:"New bucket will be created as",existing:"Existing bucket will be used"},db:{isValid:{true:"Database exists",false:"No database found"},hasAdminUser:{false:"You will need to create a new user on the next step"}},sdfs:{name:{new:"New volume will be created as",existing:"Existing volume will be used"},point:"At mounting point:",size:"Would you like to update volume size?"}},a.iconClass={true:"ok",false:"cog"},a.statusColorClass={true:"success",false:"danger"},a.isCustomBucketName=!1,a.isNameWrong=!1,a.wrongNameMessage="",a.isValidInstance=!0,a.selectBucket=function(b){a.selectedBucket=b,c.get("bucket/"+encodeURIComponent(b.bucketName)+"/metadata").then(function(b){a.settings.db.hasAdmin=b.data.hasAdmin},function(a){console.warn(a)})},angular.isUndefined(a.isSSO)&&(a.isSSO=!1);var h=function(){var b=d.open({animation:!0,backdrop:!1,templateUrl:"./partials/modal.wizard-progress.html",scope:a});return b.result.then(function(){e.go("login")},function(){}),b},i=function(){a.progressState="loading";var b=h();c.get("current").then(function(c,d){a.settings=c.data,a.selectedBucket=(c.data.s3||[])[0]||{},a.settings.mailConfiguration?a.emails=a.settings.mailConfiguration.recipients||[]:(a.emails=[],a.settings.mailConfiguration={events:{error:!1,info:!1,success:!1}}),b.dismiss()},function(c,d){a.isValidInstance=!1,a.invalidMessage=c.data.localizedMessage,b.dismiss()})};i(),a.emailNotifications=function(){a.connectionStatus=null;var b=d.open({animation:!0,templateUrl:"./partials/modal.email-notifications.html",scope:a,backdrop:!1});b.result.then(function(){a.settings.mailConfiguration.recipients=a.emails})},a.testConnection=function(){a.settings.mailConfiguration.recipients=a.emails;var b={testEmail:a.testEmail,domain:a.settings.domain,mailConfiguration:a.settings.mailConfiguration};c.check(b).then(function(b){a.connectionStatus=b.status},function(b){a.connectionStatus=b.status})},a.sendSettings=function(){var b=a.isNewVolumeSize?a.sdfsNewSize:a.settings.sdfs.volumeSize,e=function(){return a.settings.mailConfiguration.fromMailAddress?a.settings.mailConfiguration:null},i={bucketName:a.selectedBucket.bucketName,volumeSize:b,ssoMode:a.isSSO,spEntityId:a.entityId||null,mailConfiguration:e()};if(a.settings.db.hasAdmin||a.isSSO)i.ssoMode&&(i.user={email:a.adminEmail}),i.mailConfiguration=a.settings.mailConfiguration||null,i.domain=a.settings.domain,a.progressState="running",c.send("current",i,null,a.settings.sso).then(function(){a.progressState="success",f.save("ssoMode",{ssoMode:a.isSSO})},function(b,c){a.progressState="failed"}),h();else{a.userToEdit={isNew:!0,admin:!0};var j=d.open({animation:!0,templateUrl:"./partials/modal.user-edit.html",scope:a});j.result.then(function(){i.user=a.userToEdit,delete i.user.isNew,i.mailConfiguration=a.settings.mailConfiguration||null,i.domain=a.settings.domain,a.progressState="running",c.send("current",i,g).then(function(){a.progressState="success"},function(){a.progressState="failed"}),h()})}},a.validateName=function(){c.get("bucket/"+encodeURIComponent(a.selectedBucket.bucketName)).then(function(b){a.isNameWrong=!b.data.valid,a.wrongNameMessage=b.data.message},function(a,b){})}}]),angular.module("web").controller("HistoryController",["$scope","$rootScope","$q","Storage","ITEMS_BY_PAGE","DISPLAY_PAGES","$stateParams","$state","$modal","$filter","Backups","Tasks","Zones",function(a,b,c,d,e,f,g,h,i,j,k,l,m){a.maxDeleteBackupDisplay=5,a.itemsByPage=e,a.displayedPages=f,a.volumeId=g.volumeId,a.textClass={false:"Select",true:"Unselect"},a.iconClass={false:"unchecked",true:"check"},a.selectZone=function(b){a.selectedZone=b},a.isAllSelected=!1,a.selectedAmount=0,a.checkSelection=function(){a.selectedAmount=a.backups.filter(function(a){return a.isSelected}).length,a.isAllSelected=a.selectedAmount==a.backups.length},a.makeSelection=function(){a.backups.forEach(function(b){b.isSelected=!a.isAllSelected}),a.checkSelection()},a.deleteSelection=function(){a.selectedBackups=a.backups.filter(function(a){return a.isSelected});var c=i.open({animation:!0,templateUrl:"./partials/modal.backup-delete.html",scope:a});c.result.then(function(){b.isLoading=!0,a.deleteErrors=[];for(var c=a.selectedBackups.map(function(a){return a.fileName}),d=c.length,e=function(){if(b.isLoading=d>0,!b.isLoading){a.deleteErrors.length&&console.log(a.deleteErrors);var c=i.open({animation:!0,templateUrl:"./partials/modal.backup-delete-result.html",scope:a});c.result.then(function(){h.go("app.tasks")},function(){n()})}},f=0;f<c.length;f++)k.delete(c[f]).then(function(){d--,e()},function(b){a.deleteErrors.push(b),d--,e()})})},b.isLoading=!1,a.backups=[];var n=function(){b.isLoading=!0,k.getForVolume(a.volumeId).then(function(c){c.forEach(function(a){a.isSelected=!1}),a.backups=c,b.isLoading=!1},function(){b.isLoading=!1})};n(),a.restore=function(e){b.isLoading=!0,c.all([m.get(),m.getCurrent()]).then(function(b){a.zones=b[0],a.selectedZone=b[1]["zone-name"]||""}).finally(function(){b.isLoading=!1}),a.objectToProcess=e;var f=i.open({animation:!0,templateUrl:"./partials/modal.history-restore.html",scope:a});f.result.then(function(){var b={id:"",priority:"",volumes:[a.objectToProcess.volumeId],backupFileName:a.objectToProcess.fileName,type:"restore",zone:a.selectedZone,status:"waiting",schedulerManual:!0,schedulerName:d.get("currentUser").email,schedulerTime:Date.now()};l.insert(b).then(function(){var b=i.open({animation:!0,templateUrl:"./partials/modal.task-created.html",scope:a});b.result.then(function(){h.go("app.tasks")})})})}}]),angular.module("web").controller("LoginController",["$scope","$state","$stateParams","$stomp","Auth","System","Storage","toastr","$window",function(a,b,c,d,e,f,g,h,i){c.err&&"session"==c.err&&h.warning("You were logged out. Please re-login","Session expired.");var j=g.get("currentUser"),k=g.get("ssoMode");null!==j&&void 0!==j&&(k&&k.ssoMode&&(i.location.href="/saml/logout"),e.logOut()),j&&j.length>1&&(k&&k.ssoMode&&(i.location.href="/saml/logout"),e.logOut()),a.clearErr=function(){a.error=""},a.login=function(){e.logIn(a.email,a.password).then(function(c){"configurator"===c.role?b.go("config"):f.get().then(function(b){b.currentVersion!=b.latestVersion&&g.save("notification","Newer version is available! Please, create a new instance from the latest AMI."),a.subscribeWS()}).finally(function(){b.go("app.volume.list")})},function(b){a.error=b,a.password=""})}}]),angular.module("web").controller("LogsController",["$location","$anchorScroll","$stomp","$scope","$rootScope","$state","$timeout","$q","System",function(a,b,c,d,e,f,g,h,i){d.followLogs=!1,d.logs=[];var j;e.isLoading=!0;var k=[],l=[],m=0,n={warn:"warning",info:"info",error:"error",debug:""},o=!1;i.get().then(function(f){function h(a){function b(a,b){function c(){k.length>j&&(k=k.slice(-j))}function e(a){k=k.concat(a),c(),l=[],m=0,d.$apply(function(){d.logs=k})}b<15?e(a):a.length&&g(function(){e(a)},1e3)}a.body=JSON.parse(a.body);for(var c=function(a){var b=a.split("]")[0].split("[").reverse()[0],c=b.toLowerCase().trim();return n[c]},e=function(a){l.push(a),o||(o=!0,g(function(){var a=l.length-m;o=!1,b(l,a)},500))},f=0;f<a.body.length;f++){var h={type:c(a.body[f]),message:a.body[f]};e(h)}}j=f.systemProperties.logsBuffer,c.connect("/rest/ws").then(function(f){e.isLoading=!1,d.logsListener=c.subscribe("/logs",function(c,e,f){if(h(f),d.followLogs){var g="log-"+(d.logs.length?d.logs.length-1:0);a.hash(g),b()}})},function(a){e.isLoading=!1,console.log(a)})}),e.$on("$stateChangeStart",function(a,b,c,f,g,h){e.isLoading=!1,"app.logs"===f.name&&d.logsListener&&d.logsListener.unsubscribe()})}]),angular.module("web").controller("RegistrationController",["$scope","$state","Users","$modal",function(a,b,c,d){a.passwordError="",a.userExists="";var e={};a.registerUser=function(){a.passwordReg===a.passwordConf?c.getAll().then(function(f){var g=!0;if(f)for(var h=0;h<f.length;h++)if(f[h].email===e.email){g=!1,a.userExists="User with such E-mail already exists";break}g&&(e={firstName:a.firstName,lastName:a.lastName,email:a.userEmail,password:a.passwordReg},c.insert(e).then(function(){var a=d.open({animation:!0,templateUrl:"./partials/modal.user-added.html"});a.result.then(function(){b.go("login")})}))}):a.passwordError="Password does not match"}}]),angular.module("web").controller("ScheduleController",["$scope","$rootScope","$stateParams","$filter","Tasks","$modal",function(a,b,c,d,e,f){a.volumeId=c.volumeId,a.schedules=[];var g=function(){e.getRegular(a.volumeId).then(function(b){a.schedules=b})};g();var h=function(b){return{cron:b.cron,enabled:b.enabled,id:b.id,regular:"true",schedulerManual:"false",schedulerName:b.name,status:"waiting",type:"backup",volumes:[a.volumeId]}},i=function(a){return{isNew:!1,id:a.id,name:a.schedulerName,enabled:"true"==a.enabled,cron:a.cron}};a.add=function(){a.scheduleToEdit={isNew:!0,id:null,name:"",enabled:!0};var c=f.open({animation:!0,templateUrl:"./partials/modal.schedule-edit.html",scope:a});c.result.then(function(){b.isLoading=!0;var c=h(a.scheduleToEdit);e.insert(c).then(function(){g(),b.isLoading=!1},function(){b.isLoading=!1})})},a.edit=function(c){a.scheduleToEdit=i(c);var d=f.open({animation:!0,templateUrl:"./partials/modal.schedule-edit.html",scope:a});d.result.then(function(){b.isLoading=!0;var c=h(a.scheduleToEdit);e.update(c).then(function(){g(),b.isLoading=!1},function(){b.isLoading=!1})})},a.remove=function(b){a.scheduleToDelete=b;var c=f.open({animation:!0,templateUrl:"./partials/modal.schedule-del.html",scope:a});c.result.then(function(){e.delete(b.id).then(function(a){g()})})}}]),angular.module("web").controller("SettingsController",["$scope","System","Users","$modal","Configuration",function(a,b,c,d,e){var f=c.getCurrent();a.isAdmin="admin"===f.role,a.STRINGS={sdfs:{sdfsLocalCacheSize:{empty:"Local Cache Size field cannot be empty."},volumeSize:{empty:"Volume Size field cannot be empty."}},volumeType:{empty:"Volume size for io1 volume type cannot be empty.",range:"Volume size for io1 volume type must be in between 1 and 30."},otherSettings:{empty:"All fields are required. Please fill in empty fields."}};var g=function(){var b=d.open({animation:!0,templateUrl:"./partials/modal.wizard-progress.html",scope:a});return b};a.progressState="loading";var h=g();b.get().then(function(b){a.settings=b,a.settings.mailConfiguration?a.emails=a.settings.mailConfiguration.recipients||[]:(a.emails=[],a.settings.mailConfiguration={events:{error:!1,info:!1,success:!1}}),a.initialSettings=angular.copy(b),a.progressState="",h.dismiss()},function(b){console.log(b),a.progressState="failed",h.dismiss()}),a.backup=function(){var b=a.$new(!0);d.open({animation:!0,templateUrl:"./partials/modal.system-backup.html",scope:b,controller:"modalSystemBackupCtrl"})},a.uninstall=function(){d.open({animation:!0,templateUrl:"./partials/modal.system-uninstall.html",controller:"modalSystemUninstallCtrl"})},a.updateSettings=function(){var b=d.open({animation:!0,scope:a,templateUrl:"./partials/modal.settings-update.html",controller:"modalSettingsUpdateCtrl"});b.result.then(function(){a.initialSettings=angular.copy(a.settings)})},a.emailNotifications=function(){a.connectionStatus=null;var b=d.open({animation:!0,templateUrl:"./partials/modal.email-notifications.html",scope:a});b.result.then(function(){a.settings.mailConfiguration.recipients=a.emails},function(){a.settings=angular.copy(a.initialSettings)})},a.testConnection=function(){var b={testEmail:a.testEmail,domain:a.settings.domain,mailConfiguration:a.settings.mailConfiguration};e.check(b).then(function(b){a.connectionStatus=b.status},function(b){a.connectionStatus=b.status})},a.isNewValues=function(){return JSON.stringify(a.settings)!==JSON.stringify(a.initialSettings)}}]),angular.module("web").controller("TasksController",["$scope","$rootScope","$stateParams","$stomp","Tasks","Storage","$modal","$timeout",function(a,b,c,d,e,f,g,h){a.typeColorClass={backup:"primary",restore:"success",delete:"danger",system_backup:"danger"},a.typeIconClass={backup:"cloud-download",restore:"cloud-upload",delete:"remove",system_backup:"cog"},a.manualIconClass={true:"user",false:"time"},a.statusPriority=function(a){var b={canceled:5,running:4,queued:3,error:2,waiting:1};return b[a.status]||0},a.typePriority=function(a){return parseInt(a.priority)||0},a.volumeId=c.volumeId,a.tasks=[],b.isLoading=!1,a.refresh=function(){b.isLoading=!0,e.get(a.volumeId).then(function(c){a.tasks=c,i(),b.isLoading=!1},function(){b.isLoading=!1})},a.refresh(),a.$on("task-status-changed",function(a,b){j(b)});var i=function(){for(var b=0;b<a.tasks.length;b++){var c=a.tasks[b],d=f.get("lastTaskStatus_"+c.id)||{};c.progress=d.progress,c.message=d.message}},j=function(b){var c=a.tasks.filter(function(a){return a.id==b.taskId&&"COMPLETE"!=b.status})[0];c&&("complete"==c.status||"queued"==c.status||"waiting"==c.status?a.refresh():(h(function(){c.progress=b.progress,c.message=b.message},0),100==b.progress&&(f.remove("lastTaskStatus_"+c.id),a.refresh())))};a.reject=function(b){a.taskToReject=b;var c=g.open({animation:!0,templateUrl:"./partials/modal.task-reject.html",scope:a});c.result.then(function(){e.delete(b.id).then(function(){a.refresh()})})}}]),angular.module("web").controller("UserController",["$scope","$rootScope","Users","ssoMode","Storage","toastr","$modal","ITEMS_BY_PAGE","DISPLAY_PAGES",function(a,b,c,d,e,f,g,h,i){a.itemsByPage=h,a.displayedPages=i,a.users=[],a.ssoMode=d.ssoMode;var j=c.getCurrent();a.isAdmin="admin"===j.role,a.isCurrentUser=function(a){return j.email===a};var k=function(){if(a.isCurrentUser(a.userToEdit.email)){var b=angular.copy(a.userToEdit);delete b.isNew,delete b.password,delete b.admin,b.role=a.userToEdit.admin?"admin":"user",e.save("currentUser",b)}};a.editUser=function(d){a.userToEdit=angular.copy(d),a.userToEdit.isNew=!1;var e=g.open({animation:!0,templateUrl:"./partials/modal.user-edit.html",scope:a});e.result.then(function(){b.isLoading=!0,a.userToEdit.password=a.userToEdit.password||"",c.update(a.userToEdit).then(function(){a.refreshUsers(),k();g.open({animation:!0,templateUrl:"./partials/modal.user-added.html",scope:a});b.isLoading=!1},function(a){b.isLoading=!1})})},a.addUser=function(){a.userToEdit={},a.userToEdit.isNew=!0,a.userToEdit.admin=!1;var d=g.open({animation:!0,templateUrl:"./partials/modal.user-edit.html",scope:a});d.result.then(function(){b.isLoading=!0,c.insert(a.userToEdit).then(function(){var c=g.open({animation:!0,templateUrl:"./partials/modal.user-added.html",scope:a},function(a){console.log(a)});c.result.then(function(){a.refreshUsers()}),b.isLoading=!1},function(a){b.isLoading=!1})})},c.getAll().then(function(b){a.users=b}),a.refreshUsers=function(){b.isLoading=!0,a.users=[],c.getAll().then(function(c){a.users=c,b.isLoading=!1},function(){b.isLoading=!1})},a.deleteUser=function(d){a.userToDelete=d;var e=g.open({animation:!0,templateUrl:"./partials/modal.user-delete.html",scope:a});e.result.then(function(){b.isLoading=!0,c.delete(d.email).then(function(){a.refreshUsers(),b.isLoading=!1},function(){b.isLoading=!1})})}}]),angular.module("web").controller("VolumesController",["$scope","$rootScope","$state","$q","Retention","$filter","Storage","Regions","ITEMS_BY_PAGE","DISPLAY_PAGES","$modal","Volumes","Tasks","Zones",function(a,b,c,d,e,f,g,h,i,j,k,l,m,n){a.maxVolumeDisplay=5,a.itemsByPage=i,a.displayedPages=j,a.stateColorClass={"in-use":"success",creating:"error",available:"info",deleting:"error",deleted:"error",error:"error",removed:"danger"},a.textClass={false:"Select",true:"Unselect"},a.iconClass={false:"unchecked",true:"check"};var o={backup:{type:"backup",bgClass:"primary",modalTitle:"Backup Volume",iconClass:"cloud-download",description:"start backup task",buttonText:"Add backup task"},restore:{type:"restore",bgClass:"success",modalTitle:"Restore Backup",iconClass:"cloud-upload",description:"start restore task",buttonText:"Add restore task"},schedule:{type:"schedule",bgClass:"warning",modalTitle:"Add Schedule",iconClass:"time",description:"add schedule",buttonText:"Add schedule"}};a.isAllSelected=!1,a.selectedAmount=0,a.checkAllSelection=function(){var b=a.volumes.filter(function(b){return a.isDisabled(b)}).length;a.selectedAmount=a.volumes.filter(function(a){return a.isSelected}).length,a.isAllSelected=a.selectedAmount+b==a.volumes.length},a.selectAll=function(){a.volumes.forEach(function(b){p(b,!a.isAllSelected)}),a.checkAllSelection()},a.toggleSelection=function(b){p(b,!b.isSelected),a.checkAllSelection()};var p=function(a,b){a.hasOwnProperty("isSelected")&&(a.isSelected=b)};a.isDisabled=function(a){return"removed"===a.state},a.showFilter=function(){var b=k.open({animation:!0,templateUrl:"./partials/modal.volume-filter.html",controller:"modalVolumeFilterCtrl",resolve:{tags:function(){return a.tags},instances:function(){return a.instances}}});b.result.then(function(b){a.stAdvancedFilter=b})};var q=function(b){a.tags={},a.instances=[""];for(var c=0;c<b.length;c++){for(var d=0;d<b[c].tags.length;d++){var e=b[c].tags[d];a.tags.hasOwnProperty(e.key)?a.tags[e.key].indexOf(e.value)==-1&&a.tags[e.key].push(e.value):a.tags[e.key]=[e.value]}var f=b[c].instanceID;f&&a.instances.indexOf(f)==-1&&a.instances.push(f),"removed"!==b[c].state&&(b[c].isSelected=!1)}return a.isAllSelected=!1,b};a.changeRegion=function(b){a.selectedRegion=b},a.refresh=function(){b.isLoading=!0,a.volumes=[],l.get().then(function(c){a.volumes=q(c),b.isLoading=!1},function(){b.isLoading=!1})},a.refresh(),a.selectZone=function(b){a.selectedZone=b},a.volumeAction=function(e){b.isLoading=!0,d.all([n.get(),n.getCurrent()]).then(function(b){a.zones=b[0],a.selectedZone=b[1]["zone-name"]||""}).finally(function(){b.isLoading=!1}),a.selectedVolumes=a.volumes.filter(function(a){return a.isSelected}),a.actionType=e,a.action=o[e],a.schedule={name:"",cron:"",enabled:!0};var f=k.open({animation:!0,templateUrl:"./partials/modal.volumeAction.html",scope:a});f.result.then(function(){b.isLoading=!0;var d=a.selectedVolumes.map(function(a){return a.volumeId}),f=function(){var b={id:"",priority:"",volumes:d,status:"waiting"};switch(e){case"restore":b.backupFileName="",b.zone=a.selectedZone;case"backup":b.type=e,b.schedulerManual=!0,b.schedulerName=g.get("currentUser").email,b.schedulerTime=Date.now();break;case"schedule":b.type="backup",b.regular=!0,b.schedulerManual=!1,b.schedulerName=a.schedule.name,b.cron=a.schedule.cron,b.enabled=a.schedule.enabled}return b},h=f();m.insert(h).then(function(){if(b.isLoading=!1,"schedule"!=e){var d=k.open({animation:!0,templateUrl:"./partials/modal.task-created.html",scope:a});d.result.then(function(){c.go("app.tasks")})}},function(a){b.isLoading=!1,console.log(a)})})};var r=function(b){var c={};return angular.forEach(a.rule,function(a,b){c[b]=a>0}),Object.defineProperty(c,"never",{get:function(){return!a.showRetentionRule.size&&!a.showRetentionRule.count&&!a.showRetentionRule.days},set:function(b){b&&(a.showRetentionRule.size=!1,a.showRetentionRule.count=!1,a.showRetentionRule.days=!1)}}),c};a.retentionRule=function(c){b.isLoading=!0,e.get(c.volumeId).then(function(c){a.rule={size:c.size,count:c.count,days:c.days},a.showRetentionRule=r(a.rule),b.isLoading=!1;var d=k.open({animation:!0,templateUrl:"./partials/modal.retention-edit.html",scope:a});d.result.then(function(){b.isLoading=!0;var d=angular.copy(a.rule);angular.forEach(d,function(b,c){d[c]=a.showRetentionRule[c]?d[c]:0}),d.volumeId=c.volumeId,e.update(d).then(function(){b.isLoading=!1},function(){b.isLoading=!1})})},function(){b.isLoading=!1})}}]),angular.module("web").controller("modalScheduleCtrl",["$scope","$modalInstance","$filter","schedule","Schedules",function(a,b,c,d,e){a.Schedules=e,a.schedule=d,a.isNew=0==d.id,a.schedule=angular.copy(d),a.isEndless="undefined"==typeof a.schedule.end||!a.schedule.end,a.weekdays={Monday:!1,Tuesday:!1,Wednesday:!1,Thursday:!1,Friday:!1,Saturday:!1,Sunday:!1},a.shortdays={Monday:"Mo",Tuesday:"Tu",Wednesday:"We",Thursday:"Th",Friday:"Fr",Saturday:"Sa",Sunday:"Su"};for(var f in a.weekdays)a.weekdays[f]=a.schedule.week.indexOf(f)>=0;a.doEndless=function(){a.isEndless?a.schedule.end="":(a.schedule.end=a.schedule.start,a.schedule.end.setDate(a.schedule.start.getDate()+1))},a.periodicityNum=[1,2,3,4,5,10,15],a.periodicityWord=["day","week","month","year"],a.opened={start:!1,end:!1},a.today=function(){a.dt=new Date},a.clear=function(){a.dt=null},a.calendarOpen=function(b,c){b.preventDefault(),b.stopPropagation(),a.opened[c]=!0},a.ok=function(){a.schedule.week=Object.keys(a.weekdays).filter(function(b){return a.weekdays[b]}),a.schedule.start=c("date")(a.schedule.start,"yyyy-MM-dd hh:mm:ss"),a.schedule.end=function(){return null!=a.schedule.end&&a.schedule.end?c("date")(a.schedule.end,"yyyy-MM-dd hh:mm:ss"):""}(),a.isNew?e.insert(a.schedule).then(function(){b.close()}):e.update(a.schedule).then(function(){b.close()})},a.cancel=function(){b.dismiss()}}]),angular.module("web").controller("modalSettingsUpdateCtrl",["$scope","$modalInstance","System","Tasks","$rootScope",function(a,b,c,d,e){a.state="ask";var f=angular.copy(a.settings);f.mailConfiguration.fromMailAddress||(f.mailConfiguration=null),delete f.systemProperties.volumeTypeOptions;var g=function(b){e.isLoading=!0,c.send(b).then(function(){a.state="done",e.isLoading=!1},function(b){a.state="failed",e.isLoading=!1})};a.updateSettings=function(){var b=!0;f.sdfs.sdfsLocalCacheSize!=a.initialSettings.sdfs.sdfsLocalCacheSize?d.get().then(function(c){b=c.every(function(a){return"running"!==a.status}),b?g(f):a.state="busy"},function(b){a.state="failed"}):g(f)}}]),angular.module("web").controller("modalSystemBackupCtrl",["$scope","$modalInstance","Tasks","Storage",function(a,b,c,d){a.state="ask",a.sendTask=function(){var b={type:"system_backup",status:"waiting",regular:"false",schedulerManual:!0,schedulerName:d.get("currentUser").email,schedulerTime:Date.now()};c.insert(b).then(function(){a.state="done"},function(){a.state="failed"})}}]),angular.module("web").controller("modalSystemUninstallCtrl",["$scope","$modalInstance","System",function(a,b,c){a.state="ask",a.deletionOptions=[{name:"Yes",value:!0},{name:"No",value:!1}],a.delete=function(){var b={instanceId:a.instanceId,removeS3Bucket:a.removeS3Bucket.value};c.delete(b).then(function(){a.state="done"},function(b){a.delError=b,a.state="failed"})}}]),angular.module("web").controller("modalVolumeFilterCtrl",["$scope","$modalInstance","Regions","Storage","tags","instances",function(a,b,c,d,e,f){a.tags=e,a.instances=f,a.globalRegion={location:"",name:"GLOBAL",id:""},a.sliderOptions={from:0,to:16384,step:4,dimension:" GiB",skin:"plastic"},c.get().then(function(b){a.regions=b}),a.clear=function(){var b={volumeId:"",name:"",size:"0;16384",instanceID:"",region:a.globalRegion,tags:[]};a.filter=angular.copy(b)},d.get("VolumeFilter")?a.filter=d.get("VolumeFilter"):a.clear(),a.ok=function(){var c=a.filter,e={volumeId:{type:"str",value:c.volumeId},volumeName:{type:"str",value:c.name},size:{type:"int-range",value:{lower:parseInt(c.size.split(";")[0],10),higher:parseInt(c.size.split(";")[1],10)}},instanceID:{type:"str-strict",value:c.instanceID},availabilityZone:{type:"str",value:c.region.id},tags:{type:"array-inc",value:c.tags}};d.save("VolumeFilter",c),b.close(e)}}]),app.directive("autoScroll",function(){return{scope:{autoScroll:"="},link:function(a,b,c){a.$watchCollection("autoScroll",function(a){a&&JSON.parse(c.enableScroll)&&$(b).scrollTop($(b)[0].scrollHeight+$(b)[0].clientHeight)})}}}),app.directive("checkPassword",[function(){return{require:"ngModel",link:function(a,b,c,d){var e="#"+c.checkPassword;b.add(e).on("keyup",function(){a.$apply(function(){var a=b.val()===$(e).val();d.$setValidity("passwordmatch",a)})})}}}]),app.directive("complexPassword",function(){return{require:"ngModel",link:function(a,b,c,d){d.$parsers.unshift(function(a){var b=/[A-Z]/.test(a),c=/[a-z]/.test(a),e=/\d/.test(a),f=/\W/.test(a),g=b+c+e+f;return a.length>=8&&g>=3?(d.$setValidity("complexity",!0),a):void d.$setValidity("complexity",!1)})}}}),angular.module("web").directive("emails",function(){return{restrict:"E",scope:{emails:"="},template:'<div class="input-group" style="clear: both;"><input type="email" class="form-control" ng-model="newEmail" placeholder="email"/><span class="input-group-btn" style="width:0px;"></span><span class="input-group-btn"><button class="btn btn-primary" ng-click="add()" ng-disabled="!newEmail"><span class="glyphicon glyphicon-plus"></span></button></span></div><div class="tags" style="margin-top: 5px"><div ng-repeat="mail in emails track by $index" class="tag label label-success" ng-click="remove($index)"><span class="glyphicon glyphicon-remove"></span><div class="tag-value">{{mail}}</div></div></div>',link:function(a,b){a.newEmail="";var c=angular.element(b[0].querySelectorAll("input"));a.add=function(){a.newEmail&&(a.emails.push(a.newEmail),a.newEmail=""),event.preventDefault()},a.remove=function(b){a.emails.splice(b,1)},c.bind("keypress",function(b){a.newEmail&&13==b.keyCode&&(b.preventDefault(),a.$apply(a.add))})}}}),angular.module("web").directive("jqCron",function(){return{restrict:"E",require:"ngModel",scope:{ngModel:"="},link:function(a,b,c,d){var e={initial:a.ngModel||"* * * * *",onChange:function(){var b=$(this).cron("value");a.ngModel=b,d.$viewValue!=b&&d.$setViewValue(b)}};$(b).cron(e)}}}),angular.module("web").directive("stFilter",function(){return{require:"^stTable",scope:{stFilter:"="},link:function(a,b,c,d){a.$watch("stFilter",function(a){d.search(a,"availabilityZone")})}}}),angular.module("web").directive("tagFilter",function(){return{restrict:"E",scope:{tags:"=",src:"=",keyph:"@",valueph:"@"},template:'<div class="input-group tag-input" style="clear: both;"><input type="text" class="form-control" ng-model="newTag.key" placeholder="{{keyph}}" typeahead="key for key in srcKeys | filter:$viewValue" typeahead-editable="false"/><span class="input-group-btn" style="width:0px;"></span><input type="text" class="form-control" ng-model="newTag.value" placeholder="{{valueph}}" style="border-left: 0" typeahead="val for val in src[newTag.key] | filter:$viewValue" typeahead-editable="false" /><span class="input-group-btn"><button class="btn btn-primary" ng-click="add()"><span class="glyphicon glyphicon-plus"></span></button></span></div><div class="tags"><div ng-repeat="tag in tags track by $index" class="tag label label-success" ng-click="remove($index)"><span class="glyphicon glyphicon-remove"></span><div class="tag-value">{{tag.key}} : {{tag.value}}</div></div></div>',link:function(a,b,c){a.newTag={},a.srcKeys=[];var d=angular.element(b[0].querySelectorAll("input"));a.$watch("src",function(b){a.srcKeys=Object.keys(b)||[]}),a.add=function(){a.newTag.hasOwnProperty("key")&&a.newTag.hasOwnProperty("value")&&(a.tags.push(a.newTag),a.newTag={}),event.preventDefault()},a.remove=function(b){a.tags.splice(b,1)},d.bind("keypress",function(b){""!=a.newTag.key&&""!=a.newTag.value&&13==b.keyCode&&(b.preventDefault(),a.$apply(a.add))})}}}),app.directive("uploadedFile",function(){return{scope:{uploadedFile:"="},link:function(a,b,c){b.bind("change",function(b){var c=b.target.files[0];a.uploadedFile=c?c:void 0,a.$apply()})}}}),angular.module("web").filter("sizeConvertion",function(){return function(a){var b=a/1024/1024/1024;if(a)return b<1?parseInt(a/1024/1024)+" MB":parseInt(a/1024/1024/1024)+" GB"}}),angular.module("web").filter("stAdvancedFilter",function(){var a=function(a,b,c){var d={str:function(){return 0==b.length||!!a&&a.toLowerCase().indexOf(b.toLowerCase())>-1},"str-strict":function(){return 0==b.length||!!a&&a===b},"int-range":function(){return b.lower<=a&&b.higher>=a},"array-inc":function(){return 0==b.length||a.length>0&&function(){for(var c=0;c<b.length;c++)for(var d=b[c],e=0;e<a.length;e++){var f=a[e];if(f.key===d.key&&f.value===d.value)return!0}return!1}()}};return d[c]()},b=function(b,c){for(var d=Object.keys(c),e=0;e<d.length;e++){var f=d[e];if(!a(b[f],c[f].value,c[f].type))return!1}return!0};return function(a,c){if(!angular.isUndefined(a)&&!angular.isUndefined(c)&&a.length>0){var d=[];return a.forEach(function(a){b(a,c)&&d.push(a)}),d}return a}}),angular.module("web").service("Auth",["Storage","$q","$http","BASE_URL",function(a,b,c,d){var e=d+"login",f={404:"Service is unavailable",401:"Your authentication information was incorrect. Please try again"},g=function(d,g){var h=b.defer();return c({method:"POST",url:e,headers:{"Content-Type":"application/x-www-form-urlencoded"},
transformRequest:function(a){var b=[];for(var c in a)b.push(encodeURIComponent(c)+"="+encodeURIComponent(a[c]));return b.join("&")},data:{email:d,password:g}}).then(function(b){a.save("currentUser",b.data),h.resolve(b.data)},function(a,b){h.reject(f[b])}),h.promise},h=function(){return a.remove("currentUser"),c.delete(e)};return{logIn:function(a,b){return g(a,b)},logOut:function(){return h()}}}]),angular.module("web").service("Backups",["$q","$http","BASE_URL",function(a,b,c){var d=c+"rest/backup",e=function(c){var e=a.defer();return b.get(d+"/"+c).success(function(a){e.resolve(a)}).error(function(a){e.reject(a)}),e.promise},f=function(a){return b.delete(d+"/"+a).success(function(){}).error(function(a){})};return{getForVolume:function(a){return e(a)},delete:function(a){return f(a)}}}]),angular.module("web").service("Configuration",["$q","$http","BASE_URL",function(a,b,c){var d=c+"rest/configuration",e=function(c){var e=a.defer();return b({url:d+"/"+c,method:"GET"}).then(function(a,b){e.resolve(a,b)},function(a,b){e.reject(a,b)}),e.promise},f=function(c,e,f,h){var i=a.defer();h&&g(e,h).then(function(a){console.info("Files uploaded successfully")},function(){return i.reject()});var j={url:d+"/"+c,method:"POST",data:e||{}};return f&&(j.timeout=f),b(j).then(function(){i.resolve()},function(a,b){i.reject(a,b)}),i.promise},g=function(c,e){var f=a.defer(),g=new FormData,h=["idp_metadata.xml","saml_sp_cert.pem"];for(var i in e)g.append("file",e[i]);return g.append("name",h),b({url:d+"/uploadFiles",method:"POST",data:g,transformRequest:angular.identity,transformResponse:angular.identity,headers:{"Content-Type":void 0}}).then(function(){f.resolve()},function(a){console.warn(a.data),f.reject()}),delete c.sso,f.promise},h=function(c){var d=a.defer(),e={url:"/rest/system/mail/configuration/test",method:"POST",data:c};return b(e).then(function(a){d.resolve(a)},function(a){d.reject(a)}),d.promise};return{get:function(a){return e(a)},send:function(a,b,c,d){return f(a,b,c,d)},check:function(a){return h(a)}}}]),angular.module("web").service("Exception",["toastr",function(a){return{handle:function(b){a.error((b.data||{}).localizedMessage||"Error occurred!"),console.log(b)}}}]),angular.module("web").factory("Interceptor",["$q","Exception",function(a,b){return{responseError:function(c){if(401===c.status){var d="/saml/login",e="#/login?err=session",f=c.data&&c.data.loginMode&&"SSO"===c.data.loginMode;window.location=f?d:e}else 500===c.status&&c.data.localizedMessage&&b.handle(c);return a.reject(c)}}}]),angular.module("web").service("Regions",["$q","$http","BASE_URL",function(a,b,c){var d=c+"rest/regions";return{get:function(){var c=a.defer();return b.get(d).success(function(a){c.resolve(a)}),c.promise}}}]),angular.module("web").service("Retention",["$q","$http","BASE_URL",function(a,b,c){var d=c+"rest/retention",e=function(c){var e=a.defer();return b({url:d+"/"+c,method:"GET"}).success(function(a){e.resolve(a)}),e.promise},f=function(a){return b({url:d,method:"POST",data:a})};return{get:function(a){return e(a)},update:function(a){return f(a)}}}]),angular.module("web").service("Storage",[function(){return{get:function(a){return JSON.parse(sessionStorage.getItem(a))},save:function(a,b){sessionStorage.setItem(a,JSON.stringify(b))},remove:function(a){sessionStorage.removeItem(a)},clearAll:function(){sessionStorage.clear()}}}]),angular.module("web").service("System",["$q","$http","BASE_URL",function(a,b,c){var d=c+"rest/system",e=function(){var c=a.defer();return b.get(d).then(function(a){c.resolve(a.data)},function(a){c.reject(a)}),c.promise},f=function(c){var e=a.defer();return b({url:d,method:"POST",data:c}).then(function(a){e.resolve(a.data)},function(a){e.reject(a)}),e.promise},g=function(c){var e=a.defer();return b.post(d+"/delete",c).then(function(a){e.resolve(a.data)},function(a){e.reject(a)}),e.promise};return{get:function(){return e()},send:function(a){return f(a)},delete:function(a){return g(a)}}}]),angular.module("web").service("Tasks",["$q","$http","Storage","BASE_URL",function(a,b,c,d){var e=d+"rest/task",f=function(c){var d=a.defer();return b.get(e+(c?"/"+c:"")).then(function(a){d.resolve(a.data)},function(a){d.reject(a)}),d.promise},g=function(c){var d=a.defer();return b.get(e+"/regular/"+c).then(function(a){d.resolve(a.data)},function(a){d.reject(a)}),d.promise},h=function(a){return b({url:e,method:"PUT",data:a})},i=function(a){return b({url:e+"/"+a,method:"DELETE"})},j=function(a){return b({url:e,method:"POST",data:a})};return{get:function(a){return f(a)},getRegular:function(a){return g(a)},update:function(a){return h(a)},insert:function(a){return j(a)},delete:function(a){return i(a)}}}]),angular.module("web").service("Users",["$q","$http","Storage","BASE_URL",function(a,b,c,d){var e=d+"rest/user",f=function(){var c=a.defer();return b({url:e,method:"GET"}).then(function(a){c.resolve(a.data)},function(a){c.reject(a)}),c.promise},g=function(c){var d=a.defer();return b({url:e,method:"POST",data:c}).then(function(a){d.resolve(a.data)},function(a){d.reject(a)}),d.promise},h=function(a){return b({url:e,method:"PUT",data:a})},i=function(){return c.get("currentUser")},j=function(){var d=a.defer();return b({url:e+"/currentUser",method:"GET"}).then(function(a){c.save("currentUser",a.data),d.resolve(a.data)},function(a){d.reject(a)}),d.promise},k=function(a){return b({url:e+"/"+a,method:"DELETE"})};return{insert:function(a){return g(a)},delete:function(a){return k(a)},update:function(a){return h(a)},getCurrent:function(){return i()},refreshCurrent:function(){return j()},getAll:function(){return f().then(function(a){return a})}}}]),angular.module("web").service("Volumes",["$q","$http","Storage","BASE_URL",function(a,b,c,d){var e=d+"rest/volume";return{get:function(){var c=a.defer();return b.get(e).then(function(a){var b=a.data;c.resolve(b)},function(a,b){c.reject(a,b)}),c.promise}}}]),angular.module("web").service("Zones",["$q","$http","BASE_URL",function(a,b,c){var d=c+"rest/zones",e=function(c){var e=a.defer();return b.get(d+(c||"")).success(function(a){e.resolve(a)}).error(function(a){e.reject(a)}),e.promise};return{get:function(){return e()},getCurrent:function(){return e("/current")}}}]);
=======
var app = angular.module('web', ['ui.router', 'angularAwesomeSlider', 'ui.bootstrap', 'smart-table', 'ngTagsInput', 'ngStomp', 'toastr']);

app.constant('BASE_URL', './');

// Settings for table paging
app.constant('ITEMS_BY_PAGE', 25);
app.constant('DISPLAY_PAGES', 7);

app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', function ($stateProvider, $urlRouterProvider, $httpProvider) {
    $urlRouterProvider.otherwise("/app/volumes");

    var authenticated = ['$rootScope', function ($rootScope) {
        if (angular.isUndefined($rootScope.getUserName())) throw "User not authorized!";
        return true;
    }];

    var isConfig = ['$rootScope', function ($rootScope) {
        if (!$rootScope.isConfigState())  throw "System is not in configuration state!";
        return true;
    }];

    var ssoMode = ['System', '$q', '$rootScope', function (System, $q, $rootScope) {
        $rootScope.isLoading = true;
        var deferred = $q.defer();

        System.get().then(function (data) {
            $rootScope.isLoading = false;
            deferred.resolve(data);
        }, function () {
            $rootScope.isLoading = false;
            deferred.reject(false);
        });

        return deferred.promise;
    }];

    $stateProvider
        .state('app', {
            abstract: true,
            url: "/app",
            templateUrl: "partials/app.html",
            resolve: {
                authenticated: authenticated
            },
            controller: function ($scope, $rootScope, Storage, toastr) {
                $rootScope.$on('$stateChangeSuccess',
                    function(){
                        var notification = Storage.get("notification");
                        if (notification) {
                            toastr.info(notification, undefined, {
                                closeButton: true,
                                timeOut: 20000
                            });
                            Storage.remove("notification");
                        }
                    });
            }
        })
        .state('app.volume', {
            abstract: true,
            template: "<ui-view></ui-view>",
            url: ""
        })
        .state('app.volume.list', {
            url: "/volumes",
            templateUrl: "partials/volumes.html",
            controller: 'VolumesController'
        })
        .state('app.volume.schedule', {
            url: "/schedule/:volumeId",
            templateUrl: "partials/schedule.html",
            controller: 'ScheduleController'
        })

        .state('app.volume.history', {
            url: "/history/:volumeId",
            templateUrl: "partials/history.html",
            controller: 'HistoryController'
        })
        .state('app.volume.tasks', {
            url: "/tasks/:volumeId",
            templateUrl: "partials/tasks.html",
            controller: "TasksController"
        })
        .state('app.tasks', {
            url: "/tasks",
            templateUrl: "partials/tasks.html",
            controller: "TasksController"
        })
        .state('app.settings', {
            url: "/settings",
            templateUrl: "partials/settings.html",
            controller: "SettingsController"
        })
        .state('app.users', {
            url: "/users",
            templateUrl: "partials/users.html",
            controller: "UserController",
            resolve: {
                ssoMode: ssoMode
            }
        })
        .state('app.logs', {
            url: "/logs",
            templateUrl: "partials/logs.html",
            controller: "LogsController"
        })
        .state('config', {
            url: "/config",
            templateUrl: "partials/config.html",
            controller: "ConfigController",
            resolve: {
                isConfig: isConfig
            }
        })
        .state('login', {
            url: "/login?err",
            templateUrl: "partials/login.html",
            controller: "LoginController"
        })
        .state('registration', {
            url: "/registration",
            templateUrl: "partials/registration.html",
            controller: "RegistrationController"
        });

    $httpProvider.defaults.headers.common["X-Requested-With"] = 'XMLHttpRequest';
    $httpProvider.interceptors.push('Interceptor');
}])
    .run(['$rootScope', '$state', '$modal', '$stomp', 'toastr', 'Storage', 'Users', 'System', '$q',
        function ($rootScope, $state, $modal, $stomp, toastr, Storage, Users, System, $q) {
        $rootScope.isLoading = true;
        var promises = [System.get(), Users.refreshCurrent()];
        $q.all(promises).then(function (results) {
            Storage.save("ssoMode", {"ssoMode": results[0].ssoMode});
            if (results[1].email) {
                $state.go('app.volume.list');
            }
            $rootScope.isLoading = false;
        }, function () {
            $rootScope.isLoading = false;
        });

        $rootScope.getUserName = function () {
            return (Storage.get("currentUser") || {}).email;
        };

        $rootScope.isConfigState = function () {
            return (Storage.get("currentUser") || {}).role === 'configurator';
        };

        $rootScope.subscribeWS = function () {
            $stomp.setDebug(function (args) {
                // console.log(args);
            });

            $stomp
                .connect('/rest/ws')
                .then(function (frame) {
                    $rootScope.errorListener = $stomp.subscribe('/error', function (err) {
                        toastr.error(err.message, err.title);
                    });
                    $rootScope.taskListener = $stomp.subscribe('/task', function (msg) {
                        Storage.save('lastTaskStatus_' + msg.taskId, msg);
                        $rootScope.$broadcast("task-status-changed", msg);
                    });
                }, function (e) {
                    console.log(e);
                });
            };


        $rootScope.$on('$stateChangeError', function (e) {
            e.preventDefault();
            if (Storage.get("ssoMode")) {
                $rootScope.isLoading = true;
            } else {
                $state.go('login');
            }
        });

        $rootScope.errorListener = {};
        $rootScope.taskListener = {};
        if (angular.isDefined($rootScope.getUserName())) { $rootScope.subscribeWS(); }
    }]);
'use strict';
angular.module('web')
    .controller('ConfigController', ['$scope', 'Volumes', 'Configuration', '$modal', '$state', 'Storage', function ($scope, Volumes, Configuration, $modal, $state, Storage) {
        var DELAYTIME = 600*1000;
        $scope.STRINGS = {
            s3: {
                empty: 'Bucket name field cannot be empty',
                new: 'New bucket will be created as',
                existing: 'Existing bucket will be used'
            },
            db: {
                isValid: {
                    true: 'Database exists',
                    false: 'No database found'
                },
                hasAdminUser: {
                    false: 'You will need to create a new user on the next step'
                }
            },
            sdfs: {
                name: {
                    new: 'New volume will be created as',
                    existing: 'Existing volume will be used'
                },
                point: 'At mounting point:',
                size: 'Would you like to update volume size?'
            }
        };

        $scope.iconClass = {
            true: 'ok',
            false: 'cog'
        };

        $scope.statusColorClass = {
            true: 'success',
            false: 'danger'
        };

        $scope.isCustomBucketName = false;
        $scope.isNameWrong = false;
        $scope.wrongNameMessage = '';
        $scope.isValidInstance = true;
        $scope.selectBucket = function (bucket) {
            $scope.selectedBucket = bucket;
            Configuration.get('bucket/' + encodeURIComponent(bucket.bucketName) + '/metadata').then(function (result) {
                //property settings.db.hasAdmin is a legacy code which should be changed. Currently this field is replaced
                // with value from result.data.hasAdmin of this function. Speak to Kostya for more details
                $scope.settings.db.hasAdmin = result.data.hasAdmin;
            }, function (err) {
                console.warn(err);
            });
        };
		
		if (angular.isUndefined($scope.isSSO)) { $scope.isSSO = false; } 
        
		var wizardCreationProgress = function () {
            var modalInstance = $modal.open({
                animation: true,
                backdrop: false,
                templateUrl: './partials/modal.wizard-progress.html',
                scope: $scope
            });

            modalInstance.result.then(function () {
                $state.go('login')
            }, function () {
            });

            return modalInstance
        };

        var getCurrentConfig = function () {
            $scope.progressState = 'loading';
            var loader = wizardCreationProgress();

            Configuration.get('current').then(function (result, status) {
                $scope.settings = result.data;
                $scope.selectedBucket = (result.data.s3 || [])[0] || {};
                if (!$scope.settings.mailConfiguration) {
                    $scope.emails = [];
                    $scope.settings.mailConfiguration = {
                        events: {
                            "error": false,
                            "info": false,
                            "success": false
                        }
                    }
                } else {
                    $scope.emails = $scope.settings.mailConfiguration.recipients || [];
                }

                loader.dismiss();
            }, function (data, status) {
                $scope.isValidInstance = false;
                $scope.invalidMessage = data.data.localizedMessage;
                loader.dismiss();
            });
        };

        getCurrentConfig();

        $scope.emailNotifications = function () {
            $scope.connectionStatus = null;
            var emailNotificationsModalInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.email-notifications.html',
                scope: $scope,
                backdrop: false
            });

            emailNotificationsModalInstance.result.then(function () {
                $scope.settings.mailConfiguration.recipients = $scope.emails;
            })
        };

        $scope.testConnection = function () {
            $scope.settings.mailConfiguration.recipients = $scope.emails;
            var testData = {
                testEmail: $scope.testEmail,
                domain: $scope.settings.domain,
                mailConfiguration: $scope.settings.mailConfiguration
            };

            Configuration.check(testData).then(function (response) {
                $scope.connectionStatus = response.status;
            }, function (error) {
                $scope.connectionStatus = error.status;
            });
        };

        $scope.sendSettings = function () {
            var volumeSize = $scope.isNewVolumeSize ? $scope.sdfsNewSize : $scope.settings.sdfs.volumeSize;

            var getMailConfig = function () {
                if (!$scope.settings.mailConfiguration.fromMailAddress) {
                    return null;
                } else {
                    return $scope.settings.mailConfiguration
                }
            };
            var settings = {
                bucketName: $scope.selectedBucket.bucketName,
                volumeSize: volumeSize,
                domain: $scope.settings.domain,
                ssoMode: $scope.isSSO,
                spEntityId: $scope.entityId || null,
                mailConfiguration: getMailConfig()
            };

            if (!$scope.settings.db.hasAdmin && !$scope.isSSO) {
                $scope.userToEdit = {
                    isNew: true,
                    admin: true
                };

                var userModalInstance = $modal.open({
                    animation: true,
                    templateUrl: './partials/modal.user-edit.html',
                    scope: $scope
                });

                userModalInstance.result.then(function () {
                    settings.user = $scope.userToEdit;

                    delete settings.user.isNew;
                    $scope.progressState = 'running';
                    Configuration.send('current', settings, DELAYTIME).then(function () {
                        $scope.progressState = 'success';
                    }, function () {
                        $scope.progressState = 'failed';
                    });

                    wizardCreationProgress();

                });
            } else {

                if (settings.ssoMode) {
                    settings.user = {email: $scope.adminEmail}
                }

                $scope.progressState = 'running';

                Configuration.send('current', settings, null, $scope.settings.sso).then(function () {
                    $scope.progressState = 'success';
                    Storage.save("ssoMode", {ssoMode: $scope.isSSO});
                }, function (data, status) {
                    $scope.progressState = 'failed';
                });

                wizardCreationProgress();
            }
        };

        $scope.validateName = function () {
            Configuration.get('bucket/' + encodeURIComponent($scope.selectedBucket.bucketName)).then(function (result) {
                $scope.isNameWrong = !result.data.valid;
                $scope.wrongNameMessage = result.data.message;
            }, function (data, status) {
            });
        };
    }]);
'use strict';

angular.module('web')
    .controller('HistoryController',
        ['$scope', '$rootScope', '$q', 'Storage', 'ITEMS_BY_PAGE', 'DISPLAY_PAGES', '$stateParams', '$state', '$modal', '$filter', 'Backups', 'Tasks', 'Zones',
            function ($scope, $rootScope, $q, Storage, ITEMS_BY_PAGE, DISPLAY_PAGES, $stateParams, $state, $modal, $filter, Backups, Tasks, Zones) {
        $scope.maxDeleteBackupDisplay = 5;
        $scope.itemsByPage = ITEMS_BY_PAGE;
        $scope.displayedPages = DISPLAY_PAGES;

        $scope.volumeId = $stateParams.volumeId;

        $scope.textClass = {
            'false': 'Select',
            'true': 'Unselect'
        };

        $scope.iconClass = {
            'false': 'unchecked',
            'true': 'check'
        };

        $scope.selectZone = function (zone) {
            $scope.selectedZone = zone;
        };

        $scope.isAllSelected = false;
        $scope.selectedAmount = 0;

        $scope.checkSelection = function () {
            $scope.selectedAmount = $scope.backups.filter(function (b) { return b.isSelected; }).length;
            $scope.isAllSelected = $scope.selectedAmount == $scope.backups.length;
        };

        $scope.makeSelection = function () {
            $scope.backups.forEach(function (backup) {
                backup.isSelected = !$scope.isAllSelected;
            });
            $scope.checkSelection();
        };

        $scope.deleteSelection = function () {
            $scope.selectedBackups = $scope.backups.filter(function (b) { return b.isSelected; });

            var confirmInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.backup-delete.html',
                scope: $scope
            });

            confirmInstance.result.then(function () {
                $rootScope.isLoading = true;
                $scope.deleteErrors = [];

                var fileNames = $scope.selectedBackups.map(function (b) { return b.fileName });
                var remaining = fileNames.length;

                var checkDeleteFinished = function () {
                    $rootScope.isLoading = remaining > 0;
                    if (!$rootScope.isLoading){
                        if ($scope.deleteErrors.length) { console.log($scope.deleteErrors); }
                        var finishedInstance = $modal.open({
                            animation: true,
                            templateUrl: './partials/modal.backup-delete-result.html',
                            scope: $scope
                        });

                        finishedInstance.result.then(function () {
                            $state.go('app.tasks');
                        }, function () {
                            loadBackups();
                        });
                    }
                };

                for (var i = 0; i < fileNames.length; i++) {
                    Backups.delete(fileNames[i]).then(function () {
                        remaining--;
                        checkDeleteFinished();
                    }, function (e) {
                        $scope.deleteErrors.push(e);
                        remaining--;
                        checkDeleteFinished();
                    })
                }
            })
        };

        $rootScope.isLoading = false;
        $scope.backups = [];
        var loadBackups = function () {
            $rootScope.isLoading = true;
            Backups.getForVolume($scope.volumeId).then(function (data) {
                data.forEach(function (backup) {
                    backup.isSelected = false;
                });
                $scope.backups = data;
                $rootScope.isLoading = false;
            }, function () {
                $rootScope.isLoading = false;
            })
        };
        loadBackups();

        $scope.restore = function (backup) {
            $rootScope.isLoading = true;
            $q.all([Zones.get(), Zones.getCurrent()])
                .then(function (results) {
                    $scope.zones = results[0];
                    $scope.selectedZone = results[1]["zone-name"] || "";
                })
                .finally(function () {
                    $rootScope.isLoading = false;
                });

            $scope.objectToProcess = backup;
            var confirmInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.history-restore.html',
                scope: $scope
            });

            confirmInstance.result.then(function () {
                var newTask = {
                    id: "",
                    priority: "",
                    volumes: [$scope.objectToProcess.volumeId],
                    backupFileName: $scope.objectToProcess.fileName,
                    type: "restore",
                    zone: $scope.selectedZone,
                    status: "waiting",
                    schedulerManual: true,
                    schedulerName: Storage.get('currentUser').email,
                    schedulerTime: Date.now()
                };
                Tasks.insert(newTask).then(function () {
                    var successInstance = $modal.open({
                        animation: true,
                        templateUrl: './partials/modal.task-created.html',
                        scope: $scope
                    });

                    successInstance.result.then(function () {
                        $state.go('app.tasks');
                    });
                });
            });

        };

    }]);
'use strict';

angular.module('web')
    .controller('LoginController', ['$scope', '$state', '$stateParams', '$stomp', 'Auth', 'System', 'Storage', 'toastr', '$window',
        function ($scope, $state, $stateParams, $stomp, Auth, System, Storage, toastr, $window) {

        //LOGING OUT ---------------------
        if ($stateParams.err && $stateParams.err == 'session') {
            toastr.warning('You were logged out. Please re-login', 'Session expired.');
        }

        var currentUser = Storage.get("currentUser");
        var ssoMode = Storage.get("ssoMode");

        if (currentUser !== null && currentUser !== undefined) {
            if (ssoMode && ssoMode.ssoMode) {
                $window.location.href = "/saml/logout";
            }
            Auth.logOut();
        }

        if (currentUser && currentUser.length > 1) {
            if (ssoMode && ssoMode.ssoMode) {
                $window.location.href = "/saml/logout";
            }
            Auth.logOut();
        }
        //------------------------------------

        $scope.clearErr = function () {
            $scope.error = "";
        };

        $scope.login = function () {
            Auth.logIn($scope.email, $scope.password).then(function (data) {

                if (data.role === 'configurator') {
                    $state.go('config');
                } else {
                    System.get().then(function (data) {
                        if (data.currentVersion != data.latestVersion) {
                            Storage.save("notification", "Newer version is available! Please, create a new instance from the latest AMI.");
                        }
                        $scope.subscribeWS();
                    }).finally(function () {
                        $state.go('app.volume.list');
                    });
                }
            }, function (res) {
                $scope.error = res;
                $scope.password = "";
            });
        }
    }]);
'use strict';

angular.module('web')
    .controller('LogsController', ['$location', '$anchorScroll','$stomp', '$scope', '$rootScope', '$state', '$timeout', '$q', 'System', function ($location, $anchorScroll, $stomp, $scope, $rootScope, $state, $timeout, $q, System) {
        $scope.followLogs = false;
        $scope.logs = [];

        var maxLogs;
        $rootScope.isLoading = true;
        var collection = [];
        var subCollection = [];
        var initSubCollectionLength = 0;
        var logTypes = {
            warn: "warning",
            info: "info",
            error: "error",
            debug: ""
        };
        var counterStarted = false;

        System.get().then(function (settings) {
            maxLogs = settings.systemProperties.logsBuffer;

            $stomp
                .connect('/rest/ws')
                .then(function (frame) {
                    $rootScope.isLoading = false;
                    $scope.logsListener = $stomp.subscribe('/logs', function (payload, headers, res) {
                        updateLogs(res);
                        if ($scope.followLogs) {
                            var lastLogId = 'log-' + ($scope.logs.length ? $scope.logs.length - 1 : 0);
                            $location.hash(lastLogId);
                            $anchorScroll();
                        }
                    });

                }, function (e) {
                    $rootScope.isLoading = false;
                    console.log(e);
                }
            );

            function updateLogs(msg) {
                msg.body = JSON.parse(msg.body);
                // get log type, which can be error, info, etc.
                var getType = function (log) {
                    var logTypeRaw = (log.split(']')[0]).split('[').reverse()[0];
                    var logType = logTypeRaw.toLowerCase().trim();
                    return logTypes[logType]
                };

                var saveLogs = function (log) {
                    subCollection.push(log);
                    if (!counterStarted) {
                        counterStarted = true;
                        $timeout(function () {
                            var logsAdded = subCollection.length - initSubCollectionLength;
                            counterStarted = false;
                            updateLogsCollection(subCollection, logsAdded);
                        }, 500);
                    }
                };

                function updateLogsCollection(logsCollection, logsAdded) {
                    // yes, it's a magic number :) Logs are guaranteed to be displayed smoothly at
                    // this speed of 15 logs/half-sec
                    if (logsAdded < 15) {
                        sendToView(logsCollection);
                    } else {
                        // if speed of logs is more than 30 log/sec (15 logs/half-sec) => update view
                        // once per second 'till logs finished
                        if (logsCollection.length) {
                            $timeout( function () {
                                sendToView(logsCollection);
                            }, 1000)
                        }

                    }

                    //reduces array length if total logs are more than user wants
                    function checkLength() {
                        if (collection.length > (maxLogs)) {
                            collection = collection.slice(-maxLogs);
                        }
                    }

                    function sendToView(logsCollection) {
                        collection = collection.concat(logsCollection);
                        checkLength();

                        subCollection = [];
                        initSubCollectionLength = 0;
                        $scope.$apply(function () {
                            $scope.logs = collection;
                        });
                    }
                }

                for (var i = 0; i < msg.body.length; i++) {
                    var logObject = {
                        type: getType(msg.body[i]),
                        message: msg.body[i]
                    };
                    saveLogs(logObject);
                }
            }
        });

        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams, options) {
            $rootScope.isLoading = false;
            //check is needed for cases when user comes to LOGS tab, which will also trigger this event
            if (fromState.name === 'app.logs' && $scope.logsListener) {
                $scope.logsListener.unsubscribe();
            }
        })
    }]);
'use strict';

angular.module('web')
    .controller('RegistrationController', ['$scope', '$state', 'Users', '$modal', function ($scope, $state, Users, $modal) {
        $scope.passwordError = "";
        $scope.userExists = "";
        var userData = {};

        $scope.registerUser = function () {
            if ($scope.passwordReg === $scope.passwordConf) {
                // check if user already exists
                Users.getAll().then(function (data) {
                    var unique = true;

                    if (data) {
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].email === userData.email) {
                                unique = false;
                                $scope.userExists = "User with such E-mail already exists";
                                break;
                            }
                        }
                    }

                    if (unique) {
                        userData = {
                            firstName: $scope.firstName,
                            lastName: $scope.lastName,
                            email: $scope.userEmail,
                            password: $scope.passwordReg
                        };

                        Users.insert(userData).then(function () {
                            var modalInstance = $modal.open({
                                animation: true,
                                templateUrl: './partials/modal.user-added.html'
                            });

                            modalInstance.result.then(function () {
                                $state.go('login');
                            });
                        });

                    }
                });
            }
            else {
                $scope.passwordError = "Password does not match"
            }
        };
    }]);





'use strict';

angular.module('web')
    .controller('ScheduleController', ['$scope', '$rootScope', '$stateParams', '$filter', 'Tasks', '$modal', function ($scope, $rootScope, $stateParams, $filter, Tasks, $modal) {

        $scope.volumeId = $stateParams.volumeId;
        $scope.schedules = [];

        var refreshList = function () {
            Tasks.getRegular($scope.volumeId).then(function (data) {
                $scope.schedules = data;
            });
        };
        refreshList();

        var scheduleToTask = function (schedule) {
            return {
                cron: schedule.cron,
                enabled: schedule.enabled,
                id: schedule.id,
                regular: "true",
                schedulerManual: "false",
                schedulerName: schedule.name,
                status: "waiting",
                type: "backup",
                volumes: [$scope.volumeId]
            }
        };

        var taskToSchedule = function (task) {
            return {
                isNew: false,
                id: task.id,
                name: task.schedulerName,
                enabled: task.enabled == 'true',
                cron: task.cron
            };
        };

        $scope.add = function () {
            $scope.scheduleToEdit = {
                isNew: true,
                id: null,
                name: '',
                enabled: true
            };

            var modalInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.schedule-edit.html',
                scope: $scope
            });

            modalInstance.result.then(function () {
                $rootScope.isLoading = true;
                var newTask = scheduleToTask($scope.scheduleToEdit);
                Tasks.insert(newTask).then(function () {
                    refreshList();
                    $rootScope.isLoading = false;
                }, function () {
                    $rootScope.isLoading = false;
                });
            });
        };

        $scope.edit = function (task) {
            $scope.scheduleToEdit = taskToSchedule(task);

            var modalInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.schedule-edit.html',
                scope: $scope
            });

            modalInstance.result.then(function () {
                $rootScope.isLoading = true;
                var newTask = scheduleToTask($scope.scheduleToEdit);
                Tasks.update(newTask).then(function () {
                    refreshList();
                    $rootScope.isLoading = false;
                }, function () {
                    $rootScope.isLoading = false;
                });
            });
        };

        $scope.remove = function (task) {
            $scope.scheduleToDelete = task;
            var confirmInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.schedule-del.html',
                scope: $scope
            });

            confirmInstance.result.then(function () {
                Tasks.delete(task.id).then(function (data) {
                    refreshList();
                });
            });
        };
    }]);
'use strict';

angular.module('web')
    .controller('SettingsController', ['$scope', 'System', 'Users', '$modal', 'Configuration', function ($scope, System, Users, $modal, Configuration) {
        var currentUser = Users.getCurrent();
        $scope.isAdmin = currentUser.role === "admin";

        $scope.STRINGS = {
            sdfs: {
                sdfsLocalCacheSize: {
                  empty: 'Local Cache Size field cannot be empty.'
                } ,
                volumeSize: {
                 empty: 'Volume Size field cannot be empty.'
                }
            },
            volumeType: {
               empty: 'Volume size for io1 volume type cannot be empty.',
               range: 'Volume size for io1 volume type must be in between 1 and 30.'
            },
            otherSettings: {
                empty: 'All fields are required. Please fill in empty fields.'
            }
        };

        var progressLoader = function () {
            var modalInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.wizard-progress.html',
                scope: $scope
            });

            return modalInstance
        };

        $scope.progressState = 'loading';
        var loader = progressLoader();
        System.get().then(function (data) {
            $scope.settings = data;

            if (!$scope.settings.mailConfiguration) {
                $scope.emails = [];
                $scope.settings.mailConfiguration = {
                    events: {
                        "error": false,
                        "info": false,
                        "success": false
                    }
                }
            } else {
                $scope.emails = $scope.settings.mailConfiguration.recipients || [];
            }

            $scope.initialSettings = angular.copy(data);
            $scope.progressState = '';
            loader.dismiss();
        }, function (e) {
            console.log(e);
            $scope.progressState = 'failed';
            loader.dismiss();
        });

        $scope.backup = function () {
            var modalScope = $scope.$new(true);
            $modal.open({
                animation: true,
                templateUrl: './partials/modal.system-backup.html',
                scope: modalScope,
                controller: 'modalSystemBackupCtrl'
            });
        };

        $scope.uninstall = function () {
            $modal.open({
                animation: true,
                templateUrl: './partials/modal.system-uninstall.html',
                controller: 'modalSystemUninstallCtrl'
            });

        };

        $scope.updateSettings = function () {

            var settingsUpdateModal = $modal.open({
                animation: true,
                scope: $scope,
                templateUrl: './partials/modal.settings-update.html',
                controller: 'modalSettingsUpdateCtrl'
            });

            settingsUpdateModal.result.then(function () {
                $scope.initialSettings = angular.copy($scope.settings);
            });
        };

        $scope.emailNotifications = function () {
            $scope.connectionStatus = null;
            var emailNotificationsModalInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.email-notifications.html',
                scope: $scope
            });

            emailNotificationsModalInstance.result.then(function () {
                $scope.settings.mailConfiguration.recipients = $scope.emails;
            }, function () {
                $scope.settings = angular.copy($scope.initialSettings);
            })
        };

        $scope.testConnection = function () {
            var testData = {
                testEmail: $scope.testEmail,
                domain: $scope.settings.domain,
                mailConfiguration: $scope.settings.mailConfiguration
            };

            Configuration.check(testData).then(function (response) {
                $scope.connectionStatus = response.status;
            }, function (error) {
                $scope.connectionStatus = error.status;
            });
        };

        $scope.isNewValues = function () {
           return JSON.stringify($scope.settings) !== JSON.stringify($scope.initialSettings);
        };

    }]);
'use strict';

angular.module('web')
    .controller('TasksController', ['$scope', '$rootScope', '$stateParams', '$stomp', 'Tasks', 'Storage', '$modal', '$timeout', function ($scope, $rootScope, $stateParams, $stomp, Tasks, Storage, $modal, $timeout) {
        $scope.typeColorClass = {
            backup: "primary",
            restore: "success",
            delete: "danger",
            system_backup: "danger"

        };
        $scope.typeIconClass = {
            backup: "cloud-download",
            restore: "cloud-upload",
            delete: "remove",
            system_backup: "cog"
        };
        $scope.manualIconClass = {
            true: "user",
            false: "time"
        };

        $scope.statusPriority = function (task) {
            var priorities = {
                canceled: 5,
                running: 4,
                queued: 3,
                error: 2,
                waiting: 1
            };
            return priorities[task.status] || 0;
        };

        $scope.typePriority = function (task) {
            return parseInt(task.priority) || 0;
        };

        $scope.volumeId = $stateParams.volumeId;

        $scope.tasks = [];
        $rootScope.isLoading = false;
        $scope.refresh = function () {
            $rootScope.isLoading = true;
            Tasks.get($scope.volumeId).then(function (data) {
                $scope.tasks = data;
                applyTaskStatuses();
                $rootScope.isLoading = false;
            }, function () {
                $rootScope.isLoading = false;
            });
        };
        $scope.refresh();

        $scope.$on("task-status-changed", function (e, d) {
            updateTaskStatus(d);
        });

        var applyTaskStatuses = function () {
            for (var i = 0; i < $scope.tasks.length; i++) {
                var task = $scope.tasks[i];
                var msg = Storage.get('lastTaskStatus_' + task.id) || {};
                task.progress = msg.progress;
                task.message = msg.message;
            }
        };

        var updateTaskStatus = function (msg) {
            var task = $scope.tasks.filter(function (t) {
                return t.id == msg.taskId && msg.status != "COMPLETE";
            })[0];

            if (task) {
                if (task.status == 'complete' || task.status == 'queued' || task.status == 'waiting') {
                    $scope.refresh();
                } else {
                    $timeout(function() {
                        task.progress = msg.progress;
                        task.message = msg.message;
                    }, 0);

                    if (msg.progress == 100) {
                        Storage.remove('lastTaskStatus_' + task.id);
                        $scope.refresh();
                    }
                }
            }
        };

        $scope.reject = function (task) {
            $scope.taskToReject = task;

            var rejectInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.task-reject.html',
                scope: $scope
            });

            rejectInstance.result.then(function () {
                Tasks.delete(task.id).then(function () {
                    $scope.refresh();
                });
            });
        };
    }]);
'use strict';

angular.module('web')
    .controller('UserController', ['$scope', '$rootScope', 'Users', 'ssoMode', 'Storage', 'toastr', '$modal', 'ITEMS_BY_PAGE', 'DISPLAY_PAGES', function ($scope, $rootScope, Users, ssoMode, Storage, toastr, $modal, ITEMS_BY_PAGE, DISPLAY_PAGES) {
        $scope.itemsByPage = ITEMS_BY_PAGE;
        $scope.displayedPages = DISPLAY_PAGES;
        $scope.users = [];
        $scope.ssoMode = ssoMode.ssoMode;

        var currentUser = Users.getCurrent();
        $scope.isAdmin = currentUser.role === "admin";
        $scope.isCurrentUser = function (email) {
            return currentUser.email === email;
        };

        var updateCurrentUser = function () {
            if ($scope.isCurrentUser($scope.userToEdit.email)) {
                var user = angular.copy($scope.userToEdit);
                delete user.isNew;
                delete user.password;
                delete user.admin;
                user.role = $scope.userToEdit.admin ? 'admin' : 'user';
                Storage.save("currentUser", user);
            }
        };

        $scope.editUser = function (user) {
            $scope.userToEdit = angular.copy(user);
            $scope.userToEdit.isNew = false;
            var editUserModal = $modal.open({
                animation: true,
                templateUrl: './partials/modal.user-edit.html',
                scope: $scope
            });

            editUserModal.result.then(function () {
                $rootScope.isLoading = true;
                $scope.userToEdit.password = $scope.userToEdit.password || "";

                Users.update($scope.userToEdit).then(function () {
                    $scope.refreshUsers();
                    updateCurrentUser();
                    var confirmModal = $modal.open({
                        animation: true,
                        templateUrl: './partials/modal.user-added.html',
                        scope: $scope
                    });
                    $rootScope.isLoading = false;
                }, function (e) {
                    $rootScope.isLoading = false;
                });
            });
        };

        $scope.addUser = function () {
            $scope.userToEdit = {};
            $scope.userToEdit.isNew = true;
            $scope.userToEdit.admin = false;
            var modalInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.user-edit.html',
                scope: $scope
            });

            modalInstance.result.then(function () {
                $rootScope.isLoading = true;

                Users.insert($scope.userToEdit).then(function () {
                    var modalInstance = $modal.open({
                        animation: true,
                        templateUrl: './partials/modal.user-added.html',
                        scope: $scope
                    }, function (e) {
                        console.log(e);
                    });

                    modalInstance.result.then(function () {
                        $scope.refreshUsers();
                    });
                    $rootScope.isLoading = false;
                }, function (e) {
                    $rootScope.isLoading = false;
                });
            });
        };

        Users.getAll().then(function (data) {
            $scope.users = data;
        });

        $scope.refreshUsers = function () {
            $rootScope.isLoading = true;
            $scope.users = [];
            Users.getAll().then(function (data) {
                $scope.users = data;
                $rootScope.isLoading = false;
            }, function () {
                $rootScope.isLoading = false;
            })
        };

        $scope.deleteUser = function (user) {
            $scope.userToDelete = user;
            var modalInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.user-delete.html',
                scope: $scope
            });

            modalInstance.result.then(function () {
                $rootScope.isLoading = true;
                Users.delete(user.email).then(function () {
                    $scope.refreshUsers();
                    $rootScope.isLoading = false;
                }, function () {
                    $rootScope.isLoading = false;
                });
            })
        };
    }]);
'use strict';

angular.module('web')
    .controller('VolumesController', ['$scope', '$rootScope', '$state', '$q', 'Retention', '$filter', 'Storage', 'Regions', 'ITEMS_BY_PAGE', 'DISPLAY_PAGES', '$modal', 'Volumes', 'Tasks', 'Zones',
        function ($scope, $rootScope, $state, $q, Retention, $filter, Storage, Regions, ITEMS_BY_PAGE, DISPLAY_PAGES, $modal, Volumes, Tasks, Zones) {
        $scope.maxVolumeDisplay = 5;
        $scope.itemsByPage = ITEMS_BY_PAGE;
        $scope.displayedPages = DISPLAY_PAGES;

        $scope.stateColorClass = {
            "in-use": "success",
            "creating": "error",
            "available": "info",
            "deleting": "error",
            "deleted": "error",
            "error": "error",
            "removed": "danger"
        };

        $scope.textClass = {
            'false': 'Select',
            'true': 'Unselect'
        };

        $scope.iconClass = {
            'false': 'unchecked',
            'true': 'check'
        };

        var actions = {
            backup: {
                type: 'backup',
                bgClass: 'primary',
                modalTitle: 'Backup Volume',
                iconClass: 'cloud-download',
                description: 'start backup task',
                buttonText: 'Add backup task'
            },
            restore: {
                type: 'restore',
                bgClass: 'success',
                modalTitle: 'Restore Backup',
                iconClass: 'cloud-upload',
                description: 'start restore task',
                buttonText: 'Add restore task'

            },
            schedule: {
                type: 'schedule',
                bgClass: 'warning',
                modalTitle: 'Add Schedule',
                iconClass: 'time',
                description: 'add schedule',
                buttonText: 'Add schedule'
            }
        };

        $scope.isAllSelected = false;
        $scope.selectedAmount = 0;

        $scope.checkAllSelection = function () {
            var disabledAmount = $scope.volumes.filter(function (v) { return $scope.isDisabled(v)}).length;
            $scope.selectedAmount = $scope.volumes.filter(function (v) { return v.isSelected}).length;
            $scope.isAllSelected = ($scope.selectedAmount + disabledAmount == $scope.volumes.length);
        };

        $scope.selectAll = function () {
            $scope.volumes.forEach(function (volume) {
                doSelection(volume, !$scope.isAllSelected);
            });
            $scope.checkAllSelection();
        };

        $scope.toggleSelection = function (volume) {
            doSelection(volume, !volume.isSelected);
            $scope.checkAllSelection();
        };

        var doSelection = function (volume, value) {
            if(volume.hasOwnProperty('isSelected')) {
                volume.isSelected = value;
            }
        };

        $scope.isDisabled = function (volume) {
            return volume.state === 'removed'
        };

        // ---------filtering------------

        $scope.showFilter = function () {
            var filterInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.volume-filter.html',
                controller: 'modalVolumeFilterCtrl',
                resolve: {
                    tags: function () {
                        return $scope.tags;
                    },
                    instances: function () {
                        return $scope.instances;
                    }
                }
            });

            filterInstance.result.then(function (filter) {
                $scope.stAdvancedFilter = filter;
            });
        };

        var processVolumes = function (data) {
            $scope.tags = {};
            $scope.instances = [""];
            for (var i = 0; i < data.length; i++){
                for (var j = 0; j < data[i].tags.length; j++){
                    var tag = data[i].tags[j];
                    if (!$scope.tags.hasOwnProperty(tag.key)){
                        $scope.tags[tag.key] = [tag.value];
                    } else {
                        if ($scope.tags[tag.key].indexOf(tag.value) == -1){
                            $scope.tags[tag.key].push(tag.value);
                        }
                    }
                }

                var instance = data[i].instanceID;
                if (instance && $scope.instances.indexOf(instance) == -1){
                    $scope.instances.push(instance);
                }
                if (data[i].state !== 'removed') data[i].isSelected = false;
            }
            $scope.isAllSelected = false;
            return data;
        };

        //----------filtering-end-----------

        //-----------Volumes-get/refresh-------------

        $scope.changeRegion = function (region) {
            $scope.selectedRegion = region;
        };

        $scope.refresh = function () {
            $rootScope.isLoading = true;
            $scope.volumes = [];
            Volumes.get().then(function (data) {
                $scope.volumes = processVolumes(data);
                $rootScope.isLoading = false;
            }, function () {
                $rootScope.isLoading = false;
            });
        };

        $scope.refresh();
        //-----------Volumes-get/refresh-end------------

        //-----------Volume-backup/restore/retention-------------
        $scope.selectZone = function (zone) {
            $scope.selectedZone = zone;
        };

        $scope.volumeAction = function (actionType) {
            $rootScope.isLoading = true;
            $q.all([Zones.get(), Zones.getCurrent()])
                .then(function (results) {
                    $scope.zones = results[0];
                    $scope.selectedZone = results[1]["zone-name"] || "";
                 })
                .finally(function () {
                    $rootScope.isLoading = false;
                });


            $scope.selectedVolumes = $scope.volumes.filter(function (v) { return v.isSelected; });
            $scope.actionType = actionType;
            $scope.action = actions[actionType];
            $scope.schedule = { name: '', cron: '', enabled: true };

            var confirmInstance = $modal.open({
                animation: true,
                templateUrl: './partials/modal.volumeAction.html',
                scope: $scope
            });

            confirmInstance.result.then(function () {
                $rootScope.isLoading = true;
                var volList = $scope.selectedVolumes.map(function (v) { return v.volumeId; });

                var getNewTask = function(){
                    var newTask = {
                        id: "",
                        priority: "",
                        volumes: volList,
                        status: "waiting"
                    };

                    switch (actionType) {
                        case 'restore':
                            newTask.backupFileName = "";
                            newTask.zone = $scope.selectedZone;
                        case 'backup':
                            newTask.type = actionType;
                            newTask.schedulerManual = true;
                            newTask.schedulerName = Storage.get('currentUser').email;
                            newTask.schedulerTime = Date.now();
                            break;
                        case 'schedule':
                            newTask.type = 'backup';
                            newTask.regular = true;
                            newTask.schedulerManual = false;
                            newTask.schedulerName = $scope.schedule.name;
                            newTask.cron = $scope.schedule.cron;
                            newTask.enabled = $scope.schedule.enabled;
                            break;
                    }

                    return newTask;
                };

                var t = getNewTask();
                Tasks.insert(t).then(function () {
                    $rootScope.isLoading = false;
                    if (actionType != 'schedule') {
                        var successInstance = $modal.open({
                            animation: true,
                            templateUrl: './partials/modal.task-created.html',
                            scope: $scope
                        });

                        successInstance.result.then(function () {
                            $state.go('app.tasks');
                        });
                    }
                }, function (e) {
                    $rootScope.isLoading = false;
                    console.log(e);
                });

            });

        };

        var getShowRule = function (rule) {
            var showRules = {};
            angular.forEach($scope.rule, function (value, key) {
                showRules[key] = value > 0;
            });
            Object.defineProperty(showRules, 'never', {
                get: function() {
                    return !$scope.showRetentionRule.size && !$scope.showRetentionRule.count && !$scope.showRetentionRule.days;
                },
                set: function(value) {
                    if (value){
                        $scope.showRetentionRule.size = false;
                        $scope.showRetentionRule.count = false;
                        $scope.showRetentionRule.days = false;
                    }
                }
            });
            return showRules;
        };
        $scope.retentionRule = function (volume) {
            $rootScope.isLoading = true;
            Retention.get(volume.volumeId).then(function (data) {

                $scope.rule = {
                    size: data.size,
                    count: data.count,
                    days: data.days
                };
                $scope.showRetentionRule = getShowRule($scope.rule);

                $rootScope.isLoading = false;

                var retentionModalInstance = $modal.open({
                    animation: true,
                    templateUrl: './partials/modal.retention-edit.html',
                    scope: $scope
                });

                retentionModalInstance.result.then(function () {
                    $rootScope.isLoading = true;
                    var rule = angular.copy($scope.rule);
                    angular.forEach(rule, function (value, key) {
                        rule[key] = $scope.showRetentionRule[key] ? rule[key] : 0
                    });
                    rule.volumeId = data.volumeId;

                    Retention.update(rule).then(function () {
                        $rootScope.isLoading = false;
                    }, function () {
                        $rootScope.isLoading = false;
                    })
                });

            }, function () {
                $rootScope.isLoading = false;
            });

        }
    }]);
/**
 * Created by Administrator on 21.07.2015.
 */
'use strict';

angular.module('web')
    .controller('modalScheduleCtrl', ['$scope', '$modalInstance', '$filter', 'schedule', 'Schedules', function ($scope, $modalInstance, $filter, schedule, Schedules) {

        $scope.Schedules = Schedules;
        $scope.schedule = schedule;

        $scope.isNew = schedule.id == 0;
        $scope.schedule = angular.copy(schedule);
        $scope.isEndless = typeof $scope.schedule.end == 'undefined' || !$scope.schedule.end;

        $scope.weekdays = {
            Monday: false,
            Tuesday: false,
            Wednesday: false,
            Thursday: false,
            Friday: false,
            Saturday: false,
            Sunday: false
        };

        $scope.shortdays = {
            Monday: "Mo",
            Tuesday: "Tu",
            Wednesday: "We",
            Thursday: "Th",
            Friday: "Fr",
            Saturday: "Sa",
            Sunday: "Su"
        };

        //-----------DATE FORMATING---------


        for (var day in $scope.weekdays) {
            $scope.weekdays[day] = $scope.schedule.week.indexOf(day) >= 0;
        }
        ;

        $scope.doEndless = function () {
            if ($scope.isEndless) {
                $scope.schedule.end = "";
            }
            else {
                $scope.schedule.end = $scope.schedule.start;
                $scope.schedule.end.setDate($scope.schedule.start.getDate() + 1);
            }
        };

        // ------------REPEAT-EVERY-----------------------
        $scope.periodicityNum = [1, 2, 3, 4, 5, 10, 15];
        $scope.periodicityWord = ["day", "week", "month", "year"];


        // ---------------- calendar pop-up ----
        $scope.opened = {
            start: false,
            end: false
        };

        $scope.today = function () {
            $scope.dt = new Date();
        };


        $scope.clear = function () {
            $scope.dt = null;
        };

        $scope.calendarOpen = function ($event, which) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope.opened[which] = true;
        };


        // ---------------BUTTONS-------

        $scope.ok = function () {

            $scope.schedule.week = Object.keys($scope.weekdays)
                .filter(function (d) {
                    return $scope.weekdays[d];
                });
            $scope.schedule.start = $filter('date')($scope.schedule.start, 'yyyy-MM-dd hh:mm:ss');
            $scope.schedule.end = (function () {
                if ($scope.schedule.end != null && $scope.schedule.end) {
                    return $filter('date')($scope.schedule.end, 'yyyy-MM-dd hh:mm:ss')
                } else {
                    return ""
                }
            })();

            if ($scope.isNew) {
                Schedules.insert($scope.schedule).then(function () {
                    $modalInstance.close();
                });
            }
            else {
                Schedules.update($scope.schedule).then(function () {
                    $modalInstance.close();
                });
            }

        };

        $scope.cancel = function () {
            $modalInstance.dismiss();
        };

    }]);
'use strict';

angular.module('web')
    .controller('modalSettingsUpdateCtrl', ['$scope', '$modalInstance', 'System', 'Tasks', '$rootScope', function ($scope, $modalInstance, System, Tasks, $rootScope) {
        $scope.state = 'ask';

        var newSettings = angular.copy($scope.settings);
        if (!newSettings.mailConfiguration.fromMailAddress) newSettings.mailConfiguration = null;
        //deletion of Arrays from model per request of backend
        delete newSettings.systemProperties.volumeTypeOptions;

        var sendUpdateRequest = function (newSettings) {
            $rootScope.isLoading = true;
            System.send(newSettings).then(function () {
                $scope.state = "done";
                $rootScope.isLoading = false;
            }, function (e) {
                $scope.state = "failed";
                $rootScope.isLoading = false;
            });
        };

        $scope.updateSettings = function () {
            var isNoRunning = true;
            if (newSettings.sdfs.sdfsLocalCacheSize != $scope.initialSettings.sdfs.sdfsLocalCacheSize) {
                Tasks.get().then(function (data) {
                    isNoRunning = data.every(function (task) {
                        return task.status !== "running"
                    });

                    if(isNoRunning) {
                        sendUpdateRequest(newSettings);
                    } else {
                        $scope.state = "busy"
                    }
                }, function (e) {
                    $scope.state = "failed";
                });
            } else {
                sendUpdateRequest(newSettings);
            }

        }
    }]);
'use strict';

angular.module('web')
    .controller('modalSystemBackupCtrl', ['$scope', '$modalInstance', 'Tasks', 'Storage', function ($scope, $modalInstance, Tasks, Storage) {
        $scope.state = 'ask';

        $scope.sendTask = function () {
            var newTask = {
                type: "system_backup",
                status: "waiting",
                regular: "false",
                schedulerManual: true,
                schedulerName: Storage.get('currentUser').email,
                schedulerTime: Date.now()
            };
            Tasks.insert(newTask).then(function () {
                $scope.state = "done";
            }, function () {
                $scope.state = "failed";
            });

        }
    }]);
'use strict';

angular.module('web')
    .controller('modalSystemUninstallCtrl', ['$scope', '$modalInstance', 'System', function ($scope, $modalInstance, System) {
        $scope.state = 'ask';

        $scope.deletionOptions = [{
            name: "Yes",
            value: true
        }, {
            name: "No",
            value: false
        }];

        $scope.delete = function () {
            var deletionData = {
                instanceId: $scope.instanceId,
                removeS3Bucket: $scope.removeS3Bucket.value
            };

            System.delete(deletionData).then(function () {
                $scope.state = "done";
            }, function(e){
                $scope.delError = e;
                $scope.state = "failed";
            });
        }
    }]);
'use strict';

angular.module('web')
    .controller('modalVolumeFilterCtrl', ['$scope', '$modalInstance', 'Regions', 'Storage', 'tags', 'instances', function ($scope, $modalInstance, Regions, Storage, tags, instances) {
        $scope.tags = tags;
        $scope.instances = instances;
        $scope.globalRegion = {
            location: "",
            name: "GLOBAL",
            id: ""
        };
        $scope.sliderOptions = {
            from: 0,
            to: 16384,
            step: 4,
            dimension: " GiB",
            skin: "plastic"
        };

        Regions.get().then(function (regions) {
            $scope.regions = regions
        });

        //$scope.selectedRegion = $scope.globalRegion;

        $scope.clear = function () {
            var defaultFilter = {
                volumeId: "",
                name: "",
                size: "0;16384",
                instanceID: "",
                region: $scope.globalRegion,
                tags: []
            };
            $scope.filter = angular.copy(defaultFilter);
        };

        if (Storage.get('VolumeFilter')) {
            $scope.filter = Storage.get('VolumeFilter');
        } else {
            $scope.clear();
        }

        $scope.ok = function () {
            var f = $scope.filter;
            var stAdvancedFilter = {
                "volumeId": {
                    "type": "str",
                    "value": f.volumeId
                },
                "volumeName": {
                    "type": "str",
                    "value": f.name
                },
                "size": {
                    "type": "int-range",
                    "value": {
                        "lower": parseInt(f.size.split(";")[0], 10),
                        "higher": parseInt(f.size.split(";")[1], 10)
                    }
                },
                "instanceID": {
                    "type": "str-strict",
                    "value": f.instanceID
                },
                "availabilityZone": {
                    "type": "str",
                    "value": f.region.id
                },
                "tags": {
                    "type": "array-inc",
                    "value": f.tags
                }
            };

            Storage.save('VolumeFilter', f);
            $modalInstance.close(stAdvancedFilter);
        }


    }]);
app.directive('autoScroll', function () {
    return {
        scope: {
            autoScroll: "="
        },
        link: function (scope, element, attr) {

            scope.$watchCollection('autoScroll', function (newValue) {
                if (newValue && JSON.parse(attr.enableScroll))
                {
                    $(element).scrollTop($(element)[0].scrollHeight + $(element)[0].clientHeight);
                }
            });
        }
    }
});
app.directive('checkPassword', [function () {
        return {
            require: 'ngModel',
            link: function (scope, elem, attrs, ctrl) {
                var firstPassword = '#' + attrs.checkPassword;
                elem.add(firstPassword).on('keyup', function () {
                    scope.$apply(function () {
                        var v = elem.val()===$(firstPassword).val();
                        ctrl.$setValidity('passwordmatch', v);
                    });
                });
            }
        }
    }]);
app.directive('complexPassword', function() {
    return {
        require: 'ngModel',
        link: function(scope, elm, attrs, ctrl) {
            ctrl.$parsers.unshift(function(password) {
                var hasUpperCase = /[A-Z]/.test(password);
                var hasLowerCase = /[a-z]/.test(password);
                var hasNumbers = /\d/.test(password);
                var hasNonalphas = /\W/.test(password);
                var characterGroupCount = hasUpperCase + hasLowerCase + hasNumbers + hasNonalphas;

                if ((password.length >= 8) && (characterGroupCount >= 3)) {
                    ctrl.$setValidity('complexity', true);
                    return password;
                }
                else {
                    ctrl.$setValidity('complexity', false);
                    return undefined;
                }

            });
        }
    }
});
"use strict";

angular.module('web')
    .directive('emails', function() {
        return {
            restrict: 'E',
            scope: { emails: '='},
            template:
            '<div class="input-group" style="clear: both;">' +
                '<input type="email" class="form-control" ng-model="newEmail" placeholder="email"/>' +
                '<span class="input-group-btn" style="width:0px;"></span>' +
                '<span class="input-group-btn"><button class="btn btn-primary" ng-click="add()" ng-disabled="!newEmail"><span class="glyphicon glyphicon-plus"></span></button></span>' +
            '</div>' +
            '<div class="tags" style="margin-top: 5px">' +
                '<div ng-repeat="mail in emails track by $index" class="tag label label-success" ng-click="remove($index)">' +
                    '<span class="glyphicon glyphicon-remove"></span>' +
                    '<div class="tag-value">{{mail}}</div>' +
                '</div>' +
            '</div>',
            link: function ( $scope, $element ) {
                $scope.newEmail = "";
                var inputs = angular.element( $element[0].querySelectorAll('input') );

                // This adds the new tag to the tags array
                $scope.add = function() {
                    if ($scope.newEmail) {
                        $scope.emails.push($scope.newEmail);
                        $scope.newEmail = "";
                    }
                    event.preventDefault();
                };

                // This is the ng-click handler to remove an item
                $scope.remove = function ( idx ) {
                    $scope.emails.splice( idx , 1 );
                };

                // Capture all keypresses
                inputs.bind( 'keypress', function ( event ) {
                    // But we only care when Enter was pressed
                    if ( $scope.newEmail && ( event.keyCode == 13 ) ) {
                        event.preventDefault();
                        $scope.$apply( $scope.add );
                    }
                });
            }
        };
    });
'use strict';

angular.module('web')
    .directive('jqCron',function(){
        return {
            restrict: 'E',
            require: 'ngModel',
            scope: {
                ngModel: '='
            },
            link:function(scope, ele, attr, ctrl){
                var options = {
                    initial: scope.ngModel || "* * * * *",
                    onChange: function () {
                        var value = $(this).cron("value");
                        scope.ngModel = value;
                        if(ctrl.$viewValue != value){
                            ctrl.$setViewValue(value);
                        }
                    }
                };
                $(ele).cron(options);
            }
        };

    });
'use strict';

angular.module('web')
    .directive('stFilter', function () {
        return {
            require: '^stTable',
            scope: {
                stFilter: '='
            },
            link: function (scope, ele, attr, ctrl) {
                var table = ctrl;

                scope.$watch('stFilter', function (val) {
                    ctrl.search(val, 'availabilityZone');
                });

            }
        };
    });
"use strict";

angular.module('web')
    .directive('tagFilter', function() {
        return {
            restrict: 'E',
            scope: { tags: '=', src: '=', keyph: '@', valueph: '@'},
            template:
            '<div class="input-group tag-input" style="clear: both;">' +
                '<input type="text" class="form-control" ng-model="newTag.key" placeholder="{{keyph}}" typeahead="key for key in srcKeys | filter:$viewValue" typeahead-editable="false"/>' +
                '<span class="input-group-btn" style="width:0px;"></span>' +
                '<input type="text" class="form-control" ng-model="newTag.value" placeholder="{{valueph}}" style="border-left: 0" typeahead="val for val in src[newTag.key] | filter:$viewValue" typeahead-editable="false" />' +
                '<span class="input-group-btn"><button class="btn btn-primary" ng-click="add()"><span class="glyphicon glyphicon-plus"></span></button></span>' +
            '</div>' +
            '<div class="tags">' +
                '<div ng-repeat="tag in tags track by $index" class="tag label label-success" ng-click="remove($index)">' +
                    '<span class="glyphicon glyphicon-remove"></span>' +
                    '<div class="tag-value">{{tag.key}} : {{tag.value}}</div>' +
                '</div>' +
            '</div>',
            link: function ( $scope, $element, $attrs ) {
                $scope.newTag = {};
                $scope.srcKeys = [];
                var inputs = angular.element( $element[0].querySelectorAll('input') );

                $scope.$watch("src", function (v) {
                    $scope.srcKeys = Object.keys(v) || [];
                });

                // This adds the new tag to the tags array
                $scope.add = function() {
                    if ($scope.newTag.hasOwnProperty('key') && $scope.newTag.hasOwnProperty('value')) {
                        $scope.tags.push($scope.newTag);
                        $scope.newTag = {};
                    }
                    event.preventDefault();
                };

                // This is the ng-click handler to remove an item
                $scope.remove = function ( idx ) {
                    $scope.tags.splice( idx , 1 );
                };

                // Capture all keypresses
                inputs.bind( 'keypress', function ( event ) {
                    // But we only care when Enter was pressed
                    if ( $scope.newTag.key != "" &&  $scope.newTag.value != "" && ( event.keyCode == 13 ) ) {
                        event.preventDefault();
                        $scope.$apply( $scope.add );
                    }
                });
            }
        };
    });
app.directive('uploadedFile', function(){
    return {
        scope: {
            'uploadedFile': '='
        },
        link: function(scope, el, attrs){
            el.bind('change', function(event){
                var file = event.target.files[0];
                scope.uploadedFile = file ? file : undefined;
                scope.$apply();
            });
        }
    };
});
angular.module('web')
    .filter('sizeConvertion', function () {
        return function (data) {
            var gb = data / 1024 / 1024 / 1024;

            if (data) {
                if (gb < 1) {
                    return parseInt(data / 1024 / 1024) + " MB"
                } else {
                    return parseInt(data / 1024 / 1024 / 1024) + " GB"
                }
            }
        }
    });
'use strict';

angular.module('web')
    .filter('stAdvancedFilter', function () {

        var filterMatch = function (base, filter, type) {
            var typeOptions = {
                "str": function () {
                    return filter.length == 0 || (base ? base.toLowerCase().indexOf(filter.toLowerCase()) > -1 : false)
                },
                "str-strict": function () {
                    return filter.length == 0 || (base ? base === filter : false)
                },
                "int-range": function () {
                    return (filter.lower <= base && filter.higher >= base)
                },
                "array-inc": function () {
                    return filter.length == 0 || (base.length > 0 && (function () {
                            for (var i = 0; i < filter.length; i++) {
                                var tagToFilter = filter[i];
                                for (var j = 0; j < base.length; j++){
                                    var tagFromBase = base[j];
                                    if (tagFromBase.key === tagToFilter.key && tagFromBase.value === tagToFilter.value){
                                        return true;
                                    }
                                }
                            }
                            return false;
                    })());
                }
            };
            return typeOptions[type]();
        };

        var volumeMatch = function (item, filterObj) {
            var filterKeys =  Object.keys(filterObj);
            for (var i = 0; i < filterKeys.length; i++){
                var key = filterKeys[i];
                if (!filterMatch(item[key], filterObj[key].value, filterObj[key].type)) {
                    return false;
                }
            }

            return true;
        };

        return function stAdvancedFilter(array, filterObj) {
            if (!angular.isUndefined(array)
                && !angular.isUndefined(filterObj)
                && array.length > 0) {
                var result = [];
                array.forEach(function (item) {
                    if (volumeMatch(item, filterObj)){
                        result.push(item);
                    }
                });

                return result;
            } else {
                return array;
            }
        };
    });
'use strict';

angular.module('web')
    .service('Auth', ['Storage', '$q', '$http', 'BASE_URL', function (Storage, $q, $http, BASE_URL) {
        var sessionUrl = BASE_URL + "login";
        var statuses = {
            404: "Service is unavailable",
            401: "Your authentication information was incorrect. Please try again"
        };


        var _login = function (email, pass) {
            var deferred = $q.defer();

            $http({
                method: 'POST',
                url: sessionUrl,
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                transformRequest: function(obj) {
                    var str = [];
                    for(var p in obj)
                        str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                    return str.join("&");
                },
                data: {email: email, password: pass }
            }).then(function (response) {
                    Storage.save("currentUser", response.data);
                    deferred.resolve(response.data);
                }, function (err, status) {
                    deferred.reject(statuses[status]);
                });

            return deferred.promise;
        };
        
        var _logout= function () {
            Storage.remove("currentUser");
            return $http.delete(sessionUrl)
            };

        return {
            logIn: function (email, pass) {
                return _login(email, pass);
            },

            logOut: function () {
                return _logout();
            }
        };
    }]);
'use strict';

angular.module('web')
    .service('Backups', ['$q', '$http', 'BASE_URL', function ($q, $http, BASE_URL) {
        var url = BASE_URL + 'rest/backup';

        var _getForVolume = function (volume) {
            var deferred = $q.defer();
            $http.get(url + '/' + volume).success(function (data) {
                deferred.resolve(data);
            }).error(function (msg) {
                // TODO: handle 401 here
                deferred.reject(msg);
            });
            return deferred.promise;
        };

        var _delete = function (fileName) {
            return $http.delete(url + '/' + fileName)
                .success(function () {
                    // backup deleted
                })
                .error(function (msg) {
                    // TODO: handle 406
                });
        };

        return {
            getForVolume: function (volume) {
                return _getForVolume(volume);
            },
            delete: function (fileName){
                return _delete(fileName);
            }
        }
    }]);
'use strict';

angular.module('web')
    .service('Configuration', ['$q', '$http', 'BASE_URL', function ($q, $http, BASE_URL) {
        var url = BASE_URL + 'rest/configuration';

        var _get = function (type) {
            var deferred = $q.defer();
            $http({
                url: url + "/" + type,
                method: 'GET'
            }).then(function (data, status) {
                deferred.resolve(data, status);
            }, function (data, status) {
                deferred.reject(data, status)
            });
            return deferred.promise;
        };

        var _send = function (type, item, timeout, files) {
            var deferred = $q.defer();

            if (files) {
                _sendFiles(item, files).then(function (result) {
                    console.info("Files uploaded successfully");
                }, function () {
                    return deferred.reject()
                })
            }

            var request = {
                url: url + "/" + type,
                method: "POST",
                data: item || {}
            };
            if (timeout) {request.timeout = timeout;}

            $http(request).then(function () {
                deferred.resolve()
            }, function (data, status) {
                deferred.reject(data, status)
            });
            return deferred.promise;
        };

        var _sendFiles = function (item, files) {
            var deferred = $q.defer();
            var formData = new FormData();
            var namesArray = ["idp_metadata.xml", "saml_sp_cert.pem"];

            for (var key in files) {
                formData.append('file', files[key]);
            }

            formData.append('name', namesArray);

            $http({
                url: url + "/uploadFiles",
                method: "POST",
                data: formData,
                transformRequest: angular.identity,
                transformResponse: angular.identity,
                headers: {'Content-Type': undefined}
            }).then(function () {
                deferred.resolve()
            }, function (error) {
                console.warn(error.data);
                deferred.reject();
            });

            //files are sent separately from other setting. That's why
            //they should be removed from settings collection before the later is sent
            delete item.sso;

            return deferred.promise;
        };

        var _check = function (emailConfig) {
            var deferred = $q.defer();

            var request = {
                url: "/rest/system/mail/configuration/test",
                method: "POST",
                data: emailConfig
            };

            $http(request).then(function (response) {
                deferred.resolve(response)
            }, function (data) {
                deferred.reject(data)
            });
            return deferred.promise;
        };

        return {
            get: function (type) {
                return _get(type);
            },
            send: function (type, item, timeout, files) {
                return _send(type, item, timeout, files);
            },
            check: function (emailConfig) {
                return _check(emailConfig)
            }
        }
    }]);
'use strict';

angular.module('web')
    .service('Exception', ['toastr', function (toastr) {
        return {
            handle: function (error){
                toastr.error((error.data || {}).localizedMessage || "Error occurred!");
                console.log(error);
            }
        };
    }]);
/**
 * Created by avas on 31.07.2015.
 */

angular.module('web')
    .factory('Interceptor', ['$q', 'Exception', function ($q, Exception) {

        return {
            responseError: function (rejection) {
                if (rejection.status === 401) {
                    var ssoLoginPage = "/saml/login";
                    var localLoginPage = "#/login?err=session";
                    var isSso = rejection.data &&
                        rejection.data.loginMode &&
                        rejection.data.loginMode === "SSO";

                    window.location = isSso ? ssoLoginPage : localLoginPage;
                } else if (rejection.status === 500 && rejection.data.localizedMessage) {
                    Exception.handle(rejection);
                }
                return $q.reject(rejection);
            }
        }
    }]);
'use strict';

angular.module('web')
    .service('Regions', ['$q', '$http', 'BASE_URL', function ($q, $http, BASE_URL) {
        var url = BASE_URL + 'rest/regions';

        return {
            get: function () {
                var deferred = $q.defer();
                $http.get(url).success(function (data) {
                    deferred.resolve(data);
                });
                return deferred.promise;

            }
        }
    }]);
'use strict';

angular.module('web')
    .service('Retention', ['$q', '$http', 'BASE_URL', function ($q, $http, BASE_URL) {
        var url = BASE_URL + 'rest/retention';

        var _get = function (id) {
            var deferred = $q.defer();
            $http({
                url: url + "/" + id,
                method: 'GET'
            }).success(function (data) {
                deferred.resolve(data);
            });
            return deferred.promise;
        };


        var _update = function (item) {
            return $http({
                url: url,
                method: "POST",
                data: item
            });
        };

        return {
            get: function (id) {
                return _get(id);
            },
            update: function (item) {
                return _update(item);
            }

        }
    }]);
'use strict';

angular.module('web')
    .service('Storage', [function () {

        return {

            get: function (key) {
                return JSON.parse(sessionStorage.getItem(key));
            },

            save: function (key, data) {
                sessionStorage.setItem(key, JSON.stringify(data));
            },

            remove: function (key) {
                sessionStorage.removeItem(key);
            },

            clearAll : function () {
                sessionStorage.clear();
            }
        };
    }]);
'use strict';

angular.module('web')
    .service('System', ['$q', '$http', 'BASE_URL', function ($q, $http, BASE_URL) {
        var url = BASE_URL + 'rest/system';

        var _get = function () {
            var deferred = $q.defer();
            $http.get(url).then(function (result) {
                deferred.resolve(result.data);
            }, function (e) {
                deferred.reject(e);
            });
            return deferred.promise;
        };

        var _send = function (volumeSettings) {
            var deferred = $q.defer();
            $http({
                url: url,
                method: "POST",
                data: volumeSettings
            }).then(function (result) {
                deferred.resolve(result.data);
            }, function (e) {
                deferred.reject(e);
            });
            return deferred.promise;
        };

        var _delete = function (deletionData) {
            var deferred = $q.defer();
            $http.post(url + '/delete', deletionData).then(function (result) {
                deferred.resolve(result.data);
            }, function (e) {
                deferred.reject(e);
            });
            return deferred.promise;
        };

        return {
            get: function () {
                return _get();
            },
            send: function (volumeSettings) {
                return _send(volumeSettings)
            },
            delete: function (deletionData) {
                return _delete(deletionData);
            }
        }
    }]);
'use strict';

angular.module('web')
    .service('Tasks', ['$q', '$http', 'Storage', 'BASE_URL', function ($q, $http, Storage, BASE_URL) {
        var url = BASE_URL + 'rest/task';

        var getAll = function (volumeId) {
            var deferred = $q.defer();
            $http.get(url + (volumeId ? "/" + volumeId : "")).then(function (result) {
                deferred.resolve(result.data);
            }, function (e) {
                deferred.reject(e);
            });
            return deferred.promise;
        };

        var _getRegular = function (vol) {
            var deferred = $q.defer();
            $http.get(url + '/regular/' + vol).then(function (result) {
                deferred.resolve(result.data);
            }, function (e) {
                deferred.reject(e);
            });
            return deferred.promise;
        };

        var save = function (item) {
            return $http({
                url: url,
                method: 'PUT',
                data: item
            })
        };

        var remove = function (id) {
            return $http({
                url: url + "/" + id,
                method: "DELETE"
            })
        };

        var add = function (item) {
            return $http({
                url: url,
                method: "POST",
                data: item
            });
        };

        return {
            get: function (volumeId) {
                return getAll(volumeId);
            },
            getRegular: function (vol) {
                return _getRegular(vol);
            },
            update: function (item) {
                return save(item);
            },
            insert: function (item) {
                return add(item);
            },
            delete: function (id) {
                return remove(id);
            }
        }
    }]);
'use strict';

angular.module('web')
    .service('Users', ['$q', '$http', 'Storage', 'BASE_URL', function ($q, $http, Storage, BASE_URL) {
        var url = BASE_URL + "rest/user";
        var storageKey = '_users';

        var getUsers = function () {
            var deferred = $q.defer();
            $http({
                url: url,
                method: 'GET'
            }).then(function (result) {
                deferred.resolve(result.data);
            },function (e) {
                deferred.reject(e);
            });
            return deferred.promise;
        };

        var add = function (user) {
            var deferred = $q.defer();
            $http({
                url: url,
                method: 'POST',
                data: user
            }).then(function (result) {
                deferred.resolve(result.data);
            },function (e) {
                deferred.reject(e);
            });
            return deferred.promise;
        };

        var updateUser = function (user) {
            return $http({
                url: url,
                method: 'PUT',
                data: user
            })
        };

        var getCurrentUser = function () {
            return Storage.get('currentUser')
        };

        var refreshCurrentUser = function () {
            var deferred = $q.defer();
            $http({
                url: url + "/currentUser",
                method: 'GET'
            }).then(function (result) {
                Storage.save('currentUser', result.data);
                deferred.resolve(result.data);
            }, function (e) {
                deferred.reject(e);
            });
            return deferred.promise;
        };

        var remove = function (email) {
            return $http({
                url: url + "/" + email,
                method: 'DELETE'
            })
        };

        return {
            insert: function (user) {
                return add(user);
            },

            delete: function (email) {
                return remove(email);
            },

            update: function (user) {
                return updateUser(user);
            },

            getCurrent: function () {
                return getCurrentUser();
            },

            refreshCurrent: function () {
                return refreshCurrentUser();
            },

            getAll: function () {
                return getUsers().then(function (data) {
                    return data;
                })
            }
        }
    }]);
'use strict';

angular.module('web')
    .service('Volumes', ['$q', '$http', 'Storage', 'BASE_URL', function ($q, $http, Storage, BASE_URL) {
        var url = BASE_URL + 'rest/volume';

        return {
            get: function () {
                var deferred = $q.defer();
                $http.get(url).then(function (result) {
                    var data = result.data;
                    deferred.resolve(data);
                }, function (data, status) {
                    deferred.reject(data, status)
                });
                return deferred.promise;
            }
        }
    }]);
'use strict';

angular.module('web')
    .service('Zones', ['$q', '$http', 'BASE_URL', function ($q, $http, BASE_URL) {
        var url = BASE_URL + 'rest/zones';

        var _get = function (extension) {
            var deferred = $q.defer();
            $http.get(url + (extension || "")).success(function (data) {
                deferred.resolve(data);
            }).error(function (err) {
                deferred.reject(err);
            });
            return deferred.promise;
        };

        return {
            get: function () {
                return _get();
            },
            getCurrent: function () {
                return _get("/current");
            }
        }
    }]);
>>>>>>> develop
